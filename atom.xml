<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>瓦力工厂-编程训练营</title>
  
  <subtitle>Scratch编程 Ardunio机器人搭建 Python自动化</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-24T12:08:46.886Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王俊杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python零基础快速入门趣味教程001-神秘朋友</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B001/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程001/</id>
    <published>2018-12-24T12:08:46.886Z</published>
    <updated>2018-12-24T12:08:46.886Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Python  自带了一个非常有趣的 海龟绘图程序 (turtle)，它是本系列课程的主角。</p><p>在 终端中输入中，新建一个项目，然后在代码编辑器中输入anaconda-navigator，启动anaconda平台，在平台上点击jupyter打开jupyter-notebooks。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>点击 Shift+Enter 运行这段代码，便可以召唤出这位可爱的小精灵,上面的代码中 import turtle  用于导入模块，导入之后就可以应用模块的各种功能了turtle.shape(“turtle”) 调用 turtle 的 shape 方法，用于改变海龟的显示方式（默认显示的是一个三角形的小箭头）。执行这句代码之后，turtle 显示为一只形象的小海龟。turtle.exitonclick() 最后这句是告诉海龟保持住，直到遇到鼠标点击的时候才退出 (exit on click)。不然程序执行得太快，我们还来不及看到海龟，它就已经执行完毕并退出了。</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程001/001.png" alt=""></p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>请不要直接复制、粘贴代码，而是要对照着代码，自己在代码编辑器中一点一点地输入<br>Python 是大小写敏感的编程语言，输入代码时，请务必细心，注意字母大小写<br>Python 相比其他高级编程语言的一个特别之处，在于强制使用缩进，请不要在每行代码的开头随意添加空白字符（空格、Tab 键等）</p><p>现在小海龟位于窗体的正中央，龟头指向右边的方向。</p><p>接下来，我们尝试让海龟走两步。</p><p>关闭窗口（或点击窗体任何位置自动退出），将编辑器中的代码，更改为下面的样子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>我们看到小海龟从屏幕中心出发，沿着龟头的方向（右边），爬行（前进）了一段距离。</p><p>这次的代码，跟最开始的代码并没有太多的不同，只增加了 1 条语句 turtle.forward(200) 它的意思就是让海龟沿着当前龟头的指向，前进 200 个单位的距离。<br><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程001/002.png" alt=""><br>刚才我们已经学会了如何让海龟爬行，接着我们再来看如何让海龟转身。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.left(45)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>这一次，在海龟出发之前（位于窗体正中央，龟头向右），我们先通过 turtle.left(45) 让海龟向左（逆时针）旋转 45 度。此时，海龟仍然位于窗体正中央，但龟头指向屏幕右上方。接着，再让海龟沿着更改后的龟头方向爬行，turtle.forward(200) ，于是就就画出了指向屏幕右上方的一条线段。</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程001/003.png" alt=""></p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程001/004.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程001/005.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.left(15)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(105)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(120)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><iframe height="498" width="510" src="https://player.youku.com/embed/XMzk3OTYzMjkwOA==" frameborder="0" 'allowfullscreen'=""></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 入门" scheme="http://yoursite.com/categories/Python-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程002-变量</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B002/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程002/</id>
    <published>2018-12-24T08:09:53.519Z</published>
    <updated>2018-12-24T08:09:53.519Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>大家在中学就已经学过变量的概念了。例如：我们令 x = 100，则可以推出 x*2 = 200</p><p>试试下面这段 Python 代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">x = 100</span><br><span class="line">turtle.forward(x)</span><br><span class="line">turtle.left(45)</span><br><span class="line">turtle.forward(2*x)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure></p><p>运行上面的代码，小海龟将画出下面的图案:</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程002/001.png" alt=""></p><p>x = 100 声明了变量 x，并将它赋值为 100，用大家熟悉的中学数学语言来说，就是“令 x 等于 100”</p><p>接下来的代码中 turtle.forward(x) 就是让海龟前进 x 个单位的距离，由于前面已经将 x 赋值为 100，所以实际上就是让海龟前进 100 个单位的距离（图像中那条较短的水平线）</p><p>类似地 turtle.forward(2*x) 就是让海龟前进 2 倍的 x 个单位的距离，即前进 2 倍的 100 个单位的距离，最终海龟会向前爬行 2 x 100 = 200 个单位的距离 （图像中指向右上方的那条较长的斜线）</p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>Python (以及大多数编程语言) 中用 * 表示数学的乘法运算，以免和字母 x 相混淆<br>与中学数学不同的是，Python 中的变量不仅可以用来表示数字，还可以用来表示各种非数字的东西。例如，通过  wali= turtle  你可以将咪博士变身为一只海龟，然后你就可以用wali 这个变量控制海龟画图啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">wali = turtle</span><br><span class="line">wali.shape(&quot;turtle&quot;)</span><br><span class="line">x = 100</span><br><span class="line">wali.forward(x)</span><br><span class="line">wali.left(45)</span><br><span class="line">wali.forward(2*x)</span><br><span class="line">wali.exitonclick()</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>尝试画个房子（使用变量来完成，尝试调整变量的值，绘制出不同大小的房子）</p><h3 id="提示-1"><a href="#提示-1" class="headerlink" title="提示"></a>提示</h3><p>你可能会需要用到开根号的运算，引入 math 模块，然后使用 math 模块的 sqrt 方法可以进行开根号的运算。<br>例如，下面的代码，计算 5 的平方根，并将计算结果赋值给变量 x</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程002/002.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import math</span><br><span class="line">x = math.sqrt(5)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">import math</span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">line=150</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(line)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(line)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(line)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(line)</span><br><span class="line">turtle.left(135)</span><br><span class="line">turtle.forward(math.sqrt(2)*line)</span><br><span class="line">turtle.right(90)</span><br><span class="line">turtle.forward(math.sqrt(2)*line/2)</span><br><span class="line">turtle.right(90)</span><br><span class="line">turtle.forward(math.sqrt(2)*line/2)</span><br><span class="line">turtle.right(90)</span><br><span class="line">turtle.forward(math.sqrt(2)*line)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 入门" scheme="http://yoursite.com/categories/Python-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>扫地机器人</title>
    <link href="http://yoursite.com/2018/12/22/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/DPJ-051-%E6%89%AB%E5%9C%B0%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/</id>
    <published>2018-12-22T10:10:21.391Z</published>
    <updated>2018-12-22T10:10:21.391Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>有一天瓦力放学回家，看妈妈在打扫卫生，特别辛苦，瓦理想，何不做一个扫地机器人帮妈妈分担家务呢？</p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>学习目标：<br>1.同时使用2个伺服马达2个伺服马达将线分别插在OUT1 OUT2，在编程时务必选择相对应端口。调好适当的角度。<br>2.利用前面学到的遥控器组合键完成清扫任务。<br>3.连杆结构完成任务。</p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力</p><p>２．需要有轮子。</p><p>３．需要有抬起放下手臂的执行原件。</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、CPU、轮子、马达、伺服马达、遥控器。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/002.png" alt=""></p><p><img src="/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/003.png" alt=""></p><p><img src="/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/004.png" alt=""></p><p><img src="/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/005.png" alt=""></p><p><img src="/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/006.png" alt=""></p><p><img src="/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/007.png" alt=""></p><h3 id="扫地机器人程序设计："><a href="#扫地机器人程序设计：" class="headerlink" title="扫地机器人程序设计："></a>扫地机器人程序设计：</h3><p><img src="/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/008.png" alt=""></p><p>扫地机器人完成了，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/22/瓦力工厂/DPJ-051-扫地机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程003-循环</title>
    <link href="http://yoursite.com/2018/12/21/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B003/"/>
    <id>http://yoursite.com/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程003/</id>
    <published>2018-12-21T07:29:42.207Z</published>
    <updated>2018-12-21T07:29:42.207Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在前面的教程中，瓦力博士留了一道练习题给大家—-画正方形，相信聪明的你应该已经画出来了。</p><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程003/001.png" alt=""><br>下面是瓦力博士实现的代码。 是不是跟你的代码很像呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.forward(200)</span><br><span class="line">turtle.left(90)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>虽然这段代码可以成功绘制出一个正方形，但它还有些不足的地方。仔细观察，我们发现，有许多代码是重复的：第 3, 4 行的代码重复了 4 次。在编程的时候，我们要尽量避免重复的代码。遇到需要重复执行的语句，我们应当使用循环来实现。</p><p>下面是瓦力博士用循环重新实现的画正方形的功能。怎么样，代码是不是简洁许多了呢？但是好像看不太懂了？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">for i in range(4):</span><br><span class="line">    turtle.forward(200)</span><br><span class="line">    turtle.left(90)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>第 3, 4, 5 行就是一个循环，用于执行重复的语句。</p><p>其中，第 4, 5 行的代码和原来的版本”几乎”是一样的，它们是需要重复执行的语句，我们称之为循环体。不过，一定要注意的是，同原来的版本相比，第 4, 5 行的代码不是顶格写的，而是向右缩进了一些（所以是“几乎”一样，而不是完全相同），Python 正是根据缩进来推断哪些语句属于循环体。通常我们使用连续的 4 个空格符来表示一级的缩进。</p><p>第 3 行的代码是一个 for 循环。它的作用是重复执行循环体中的语句。可是要重复执行多少次呢？答案是 4 次。为什么？我们先来看 range 函数，range(n) 相当于产生一个从 0 到 n-1 的等差数列， 即 0, 1, 2…, n-1，总共 n 个数字。所以，这里的 range(4) 相当于数列 0, 1, 2, 3，总共是 4 个数字。 for i in range(4):  的意思就是每次循环从数列中取出 1 个数字，赋值给变量 i，直至取完数列中所有的数字，即</p><p>第 1 次循环的时候，i = 0<br>第 2 次循环的时候，i = 1<br>第 3 次循环的时候，i = 2<br>第 4 次循环的时候，i = 3<br>然后呢？然后循环就结束了，因为 range(4) 对应的数列只有 0, 1, 2, 3 这 4 个数字。这 4 个数字通过 4 次循环已经全部取完了。没数字可取了，所以循环也就结束了。因此，第 3 行的代码  for i in range(4):  将执行 4 次循环体（第 4， 5 行的代码）</p><p>最后，瓦力博士给大家展示一个更高级一点的例子—-嵌套循环，即循环体里面还有循环！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">for i in range(16):</span><br><span class="line">    turtle.left(22.5)</span><br><span class="line">    for j in range(4):</span><br><span class="line">        turtle.forward(200)</span><br><span class="line">        turtle.left(90)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>先不要运行代码，尝试分析一下，上面这段代码会绘制出什么样的图案？<br>让代码跑起来，看看你的分析是否正确。</p><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程003/002.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程007-条件循环</title>
    <link href="http://yoursite.com/2018/12/21/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B007/"/>
    <id>http://yoursite.com/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程007/</id>
    <published>2018-12-21T07:29:35.622Z</published>
    <updated>2018-12-21T07:29:35.622Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>条件循环能够让程序在条件成立时（即为真时）重复执行循环体中的语句。如果条件一直成立（即永远不会为假），则循环会一直进行下去，不会停止。如果初始时，条件不成立，则循环 1 次也不会执行。Python 中条件循环使用 while 关键字来实现。</p><p>看下面这段示例代码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.speed(0)</span><br><span class="line">def forward(max_distance):</span><br><span class="line">    distance = 0</span><br><span class="line">    step = 1</span><br><span class="line">    while distance &lt; max_distance:</span><br><span class="line">        turtle.forward(step)</span><br><span class="line">        distance += step</span><br><span class="line">forward(100)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>函数 forward 实现的功能和原版的 turtle.forward 是一样的，但这里我们是借助条件循环来实现的。</p><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程007/001.png" alt=""></p><p>第 5 行 turtle.speed(0) 设置海龟爬行的速度。速度的取值为 [0, 10]。当取值在 [1, 10] 之间时，数值越大，绘图的速度就越快。当取值为 0 时，海龟将以最快的速度绘图。这里，我们让海龟以最快的速度爬行。因为，在我们自定义的 forward 函数中（第 8-13 行），我们要让海龟移动很多步，但每次只移动 1 个很小的距离，为了尽快看到最终绘图的效果，我们得让海龟爬得快一些。</p><p>第 8 行 def forward(max_distance): 声明 forward 函数，它有 1 个参数 max_distance。这个函数要实现的功能是，让海龟一直爬行，直到海龟总的爬行距离达到（或超过） max_distance 时才停止爬行。</p><p>第 9 行 distance = 0 变量 distance 用于记录当前海龟已经累计爬行了多远的距离。初始时，海龟还没有开始爬行，因此 distance 的初始值为 0。</p><p>第 10 行 step = 1 设置海龟爬行的步长，即每 1 步要爬多远的距离。</p><p>第 11-13 行是用 while 语句实现的条件循环，其中第 11 行， while distance &lt; max_distance: 指明了循环条件为  distance &lt; max_distance 即，当海龟累计爬行距离 (distance) 小于规定的最大爬行距离 (max_distance) 时，执行循环体中的语句（第 12, 13 行）。</p><p>第 12, 13 行是循环体，其中第 12 行 turtle.forward(step) 让海龟以指定步长 step 前进一小段距离。第 13 行 distance += step 这是一种简写的形式，它等价于 distance = distance + step ，即将海龟刚才（第 12 行）爬行的那一小段距离累加到 distance 变量中。类似 for 循环，while 循环的循环体（第 12, 13 行）也要比 while  语句所在的行（第 11 行），向右缩进一些，通常我们用连续的 4 个空格来表示一级的缩进。</p><p>不过，现在的 forward 跟原版的 turtle.forward 效果是一样的，没啥意思，瓦力博士把代码改进一下，让它变得好玩一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.speed(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def forward(max_distance, max_radius):</span><br><span class="line">    distance = 0</span><br><span class="line">    step = 1</span><br><span class="line">    while distance &lt; max_distance:</span><br><span class="line">        if turtle.distance(0,0) &gt;= max_radius:</span><br><span class="line">            angle = turtle.towards(0,0)</span><br><span class="line">            turtle.setheading(angle)</span><br><span class="line">        turtle.forward(step)</span><br><span class="line">        distance += step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">forward(550, 100)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>再次运行程序，你会看到海龟在一条直线上折返爬行。</p><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程007/002.png" alt=""></p><p>第 8 行 def forward(max_distance, max_radius): 我们为 forward 函数引入了一个新的参数 max_radius。后面，我们要实现的功能是当海龟离开原点的距离达到（或超过） max_radius 时，就调头往回爬，即往复爬行。</p><p>实现往复爬行对应的代码在第 12-14 行。</p><p>第 12 行 if turtle.distance(0,0) &gt;= max_radius: ，其中 turtle.distance(0,0) 返回的是海龟与原点 (0, 0) 的距离。因此，当海龟与原点的距离达到或超过 max_radius 时，if 条件成立，程序将执行相应的语句（第 13, 14 行）。</p><p>第 13 行 angle = turtle.towards(0,0) ，其中  turtle.towards(0,0) 返回的是海龟朝向原点 (0, 0) 的角度。计算角度时，水平向右为 0 度，逆时针方向为角度增大的方向。</p><p>第 14 行 turtle.setheading(angle) 直接设定海龟的朝向，由于前面（第 13 行），将 angle 的值设置为海龟朝向原点的角度，所以这里经过 setheading 设置之后，海龟将朝向原点的方向。因此，后面再调用 turtle.forward  （第 15 行），海龟就会往原点的方向移动，即往回爬行。</p><p>现在，海龟能够在一条直线上往复爬行，虽然比之前改进了一些，但还是显得比较单调。接下来，瓦力博士再进一步改进代码，让它变得更生动一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import turtle</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.speed(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def forward(max_distance, max_radius):</span><br><span class="line">    distance = 0</span><br><span class="line">    step = 1</span><br><span class="line">    while distance &lt; max_distance:</span><br><span class="line">        if turtle.distance(0,0) &gt;= max_radius:</span><br><span class="line">            angle = turtle.towards(0,0) + random.randint(-45, 45)</span><br><span class="line">            turtle.setheading(angle)</span><br><span class="line">        turtle.forward(step)</span><br><span class="line">        distance += step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">forward(10000, 100)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>运行上面的代码，你会看到海龟随机地往返爬行。刚开始，你看不出什么规律，但等它爬行一段时间之后，你会发现海龟实际上是被限制在一个圆圈当中运动。</p><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程007/003.png" alt=""></p><p>第 2 行 import random 导入 random 模块，用于生成随机数。</p><p>第 14  行 angle = turtle.towards(0,0) + random.randint(-45, 45) 其中的  random.randint(-45, 45) 用于产生 [-45, 45] 之间的随机整数，将这个随机整数加到朝向原点的角度上，这样海龟就不再精确地朝向原点，而是有一个随机波动的角度。因此，海龟就不再精确地按原路返回，从而摆脱直线的束缚。</p><p>但是，原来的 2 个约束依然存在：</p><p>海龟离开原点的距离不能超过 max_radius（第 13 行），所以它被限制在一个圆圈中运动<br>海龟总的运动距离不能超过 max_distance （第 12 行），所以它最终会停止运动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程006-条件</title>
    <link href="http://yoursite.com/2018/12/21/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B006/"/>
    <id>http://yoursite.com/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程006/</id>
    <published>2018-12-21T07:28:15.282Z</published>
    <updated>2018-12-21T07:28:15.282Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前面的教程中，我们已经可以让小海龟绘制出各种图形了。但是，所有绘图的代码都是预先编好的，程序一旦运行起来，运行结果（绘制的图形）就是固定不变的。这一节中，瓦力博士将教大家如何让海龟响应用户的输入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def move():</span><br><span class="line">    direction = turtle.textinput(&apos;Input direction&apos;, &apos;Go left or right?&apos;)</span><br><span class="line">    if direction == &apos;left&apos;:</span><br><span class="line">        turtle.left(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line"></span><br><span class="line">    if direction == &apos;right&apos;:</span><br><span class="line">        turtle.right(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line">move()</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure></p><p>程序运行起来之后，会先弹出一个输入框，询问你海龟的运动方向。你可以输入 left 或者 right。<br><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程006/001.png" alt=""></p><p>当你按下 ok 按钮之后，海龟就会根据你的输入（left 或 right），相应地向左或向右运动。</p><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程006/002.png" alt=""></p><p>这个例子中，程序的运行结果不完全取决于事先编写的代码，它还和你的输入有关。</p><p>第 5 行 direction = turtle.textinput(‘Input direction’, ‘Go left or right?’) 弹出一个输入框。输入框（窗口）的标题是 Input direction，输入框的提示文字为 Go left or right?。</p><p>当用户完成输入点击 ok 按钮时，变量 direction 将获得用户输入的值。<br>当用户点击 cancel 按钮时，变量 direction 的值为 None （None 为Python 中的关键字，表示什么也没有的意思）。<br>第 7, 8, 9 行称为条件语句。每个 if 语句（第 7 行）表示一个条件，它只有 2 种情况：要么成立（为真，值为 True），要么不成立（为假，值为 False）。</p><p>第 7 行 if direction == ‘left’: 对应的条件是判断变量 direction 与字符串 ‘left’ 是否相等。如果相等则执行第 8, 9 行的代码，否则就不执行第 8, 9 行的代码。</p><p>翻译成大白话就像下面这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果变量 direction 等于 left，则执行下面的语句</span><br><span class="line">    turtle.left(60)</span><br><span class="line">    turtle.forward(100)</span><br></pre></td></tr></table></figure></p><p>  所以，当用户输入 left，并点击 ok 按钮时，direction 接收到用户的输入 left，它的值等于 left，海龟就先向左转 60 度（执行第 8 行代码），再前进 100 个单位（执行第 9 行代码）。</p><p>要注意的是 Python 中比较 2 个东西是否相等，要用 == （即 2 个连续的等号），因为单独的 = （等号）在 Python 中表达的是将某个值赋值给某个变量的意思，因此，比较是否相等就得用另外的符号（即 ==）了。</p><p>另外，还要注意缩进，第 8, 9 行的代码要比 if 语句所在的行（第 7 行），向右缩进一些。这样 Python 才知道，当 if 语句为真时（即条件成立时），需要执行哪些代码。和瓦力博士在前面的教程中谈到的一样，我们一般用连续的 4 个空格符号来表示一级的缩进。</p><p>第 11, 12, 13 行也是条件语句，它们和第 7, 8, 9 行代码类似，只不过条件成立的条件改成了变量 direction 的值等于 right。</p><p>if 语句还有其他一些语法。下面，瓦力博士给大家展示的是 if … else 的语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def move():</span><br><span class="line">    direction = turtle.textinput(&apos;Input direction&apos;, &apos;Go left or right?&apos;)</span><br><span class="line"></span><br><span class="line">    if direction == &apos;left&apos;:</span><br><span class="line">        turtle.left(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line">    else:</span><br><span class="line">        turtle.right(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line"></span><br><span class="line">move()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p> 将 7-12 行的代码翻译成大白话就像下面这样，<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 如果变量 direction 等于 left，则执行下面的语句</span><br><span class="line">    turtle.left(60)</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">否则，执行下面的语句</span><br><span class="line">    turtle.right(60)</span><br><span class="line">    turtle.forward(100)</span><br></pre></td></tr></table></figure></p><p> 注意体会前后 2 个版本细微的差别。考虑用户输入一个既不是 left 也不是 right 的字符串（或者直接点击 cancel 按钮）。</p><p> 前一个版本中，海龟不会发生运动。因为此时， if direction == ‘left’: 不成立， if direction == ‘right’: 也不成立，所有的绘图代码都没有机会执行。<br> 后一个版本中，海龟会往右下方向运动。因为，后一个版本只检查 if direction == ‘left’: 是否成立。当该条件不成立时，不论变量 direction 的值是多少，它都会执行 else 对应的语句。<br> 要实现和第 1  个版本一样的效果，我们可以用 if … elif 这样的语法。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> import turtle</span><br><span class="line"></span><br><span class="line">def move():</span><br><span class="line">    direction = turtle.textinput(&apos;Input direction&apos;, &apos;Go left or right?&apos;)</span><br><span class="line">    if direction == &apos;left&apos;:</span><br><span class="line">        turtle.left(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line">    elif direction == &apos;right&apos;:</span><br><span class="line">        turtle.right(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line">move()</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p> 这个版本中，程序会依次，</p><p>先检查 if direction == ‘left’: （第 7 行）的条件，如果成立则执行相应的代码（第 8, 9 行），并忽略剩余的其他条件。如果不成立，则顺次检查下一个条件  if direction == ‘right’: （第 10 行）。<br>类似地，如果该条件成立，则执行相应的代码（第 11, 12 行），并忽略剩余的其他条件，否则再顺次检查下一个条件。<br>这样一直重复下去，直至没有可检查的条件为止。<br>虽然，第 3 个版本和第 1 个版本，最终呈现的效果是一模一样的，但它们的内部的执行过程，仍然有细微的差别。</p><p>第 1 个版本中，程序一定会检查条件 if direction == ‘right’: 是否成立，无论前一个条件  if direction == ‘left’: 是否成立。<br>最后一个版本中，程序只有在前一个条件 if direction == ‘left’: 不成立的时候，才会检查条件  if direction == ‘right’: 是否成立。<br>因此，虽然最终的效果是一样的，但从执行效率上来看，最后一个版本要略微高效一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程005-参数</title>
    <link href="http://yoursite.com/2018/12/21/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B005/"/>
    <id>http://yoursite.com/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程005/</id>
    <published>2018-12-21T07:27:39.919Z</published>
    <updated>2018-12-21T07:27:39.919Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>上一个教程中，瓦力博士带大家学习了函数的使用。例如，line_without_moving 函数，可以让海龟先画出一条线段，然后再回来起点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br></pre></td></tr></table></figure></p><p>  但是，这个函数还是有一些局限性的。譬如，海龟所画线段的长度是固定的，这样就显得不够灵活。那么有什么办法，让函数变得更灵活一些呢？答案就是使用参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def line_without_moving(length):</span><br><span class="line">  turtle.forward(length)</span><br><span class="line">  turtle.backward(length)</span><br></pre></td></tr></table></figure></p><p>对比前后 2 段代码，新版的 line_without_moving 在函数声明的地方（第 1 行），在小括号里面写上了 length；又将函数体中（第 2, 3 行）的数字 100 替换成 length。这里的 length 就称为函数的参数，我们在函数调用时，可以向函数参数传递不同的值，这样函数体中用到 length 参数的地方，也就间接地用到我们提供的值啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def line_without_moving(length):</span><br><span class="line">    turtle.forward(length)</span><br><span class="line">    turtle.backward(length)</span><br><span class="line"></span><br><span class="line">line_without_moving(100)</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving(150)</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving(200)</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving(250)</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>运行上面这段画十字型的代码，我们看到构成十字型的 4 条线段长短不一。这是因为我们在调用 line_without_moving 函数时，使用了不同的参数（第 9, 11, 13, 15 行）。<br><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程005/001.png" alt=""></p><p>关于函数参数，瓦力博士要提醒大家的是，函数参数只能在本函数内部（即本函数体中）使用。函数之外，函数参数就无效了。例如，函数 line_without_moving 的参数 length 就只能在 line_without_moving 函数中使用，你不能在其他的地方使用它。</p><p>还记得上个教程中，瓦力博士给大家留的那个画蜂巢的作业吗？聪明的你，是不是已经画出来了呢？</p><p>下面是瓦力博士的代码，代大家参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def hexagon():</span><br><span class="line">  for i in range(6):</span><br><span class="line">      turtle.forward(50)</span><br><span class="line">      turtle.left(60)</span><br><span class="line"></span><br><span class="line">def honeycomb():</span><br><span class="line">    for i in range (6):</span><br><span class="line">        hexagon()</span><br><span class="line">        turtle.forward(50)</span><br><span class="line">        turtle.right(60)</span><br><span class="line"></span><br><span class="line">honeycomb()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>现在，蜂巢的大小的固定的。使用这节课的知识，通过函数参数，我们可以很方便地控制蜂巢的大小。</p><p>下面是瓦力博士改进后的代码。通过参数 size，我们可以自由地控制蜂巢的大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def hexagon(size):</span><br><span class="line">  for i in range(6):</span><br><span class="line">      turtle.forward(size)</span><br><span class="line">      turtle.left(60)</span><br><span class="line"></span><br><span class="line">def honeycomb(size):</span><br><span class="line">    for i in range (6):</span><br><span class="line">        hexagon(size)</span><br><span class="line">        turtle.forward(size)</span><br><span class="line">        turtle.right(60)</span><br><span class="line"></span><br><span class="line">honeycomb(80)</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程005/002.png" alt=""></p><p>参数的传递过程如下：</p><p>第 14 行，我们在调用函数 honeycomb  时，将 80 传递给了 honeycomb 的参数 size<br>函数 honeycomb 接受了 80 这个参数值（第 8 行），因此函数 honeycomb 中，所有使用到参数 size 的地方（第 10, 11 行），都得到了 80 这个值<br>函数 honeycomb 中，又将 80 这个值传递给被调用的函数，第 10 传递给函数 hexagon, 第 11 行传递给函数 turtle.forward<br>函数 hexagon 接受了 80 个参数值（第 3 行），因此函数 hexagon 中，所有使用到参数 size 的地方（第 5 行），都得到了 80 这个值<br>……<br>这里，瓦力博士要提醒大家的是：函数 hexagon 和 honeycomb 中都有参数 size，这 2 个 size 虽然同名，而且在参数传递的过程中，都被赋予相同的值（80），但它们不是同一个参数！hexagon 中的参数 size，其作用域（即有效范围）是第 3-6 行；honeycomb 中的参数 size，其作用域是第 8-12 行。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>尝试编写一个带参数的函数，实现任意正多边形的绘制<br><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程005/003.png" alt=""></p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>设计一个名为 draw_polygon 的函数来绘制任意正多边形<br>draw_polygon 接受 2 个参数 sides 和 length（多个参数之间用英文逗号分隔）<br>sides 用于控制正多边形的边数（内角）<br>length 用于控制正多边的边长（大小）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def draw_polygon(sides, length):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程004-函数</title>
    <link href="http://yoursite.com/2018/12/21/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B004/"/>
    <id>http://yoursite.com/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程004/</id>
    <published>2018-12-21T03:50:39.709Z</published>
    <updated>2018-12-21T03:50:39.709Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>什么样的程序员才是优秀的程序员？瓦力博士认为“慵懒”的程序员才是真正优秀的程序员。听起来不合逻辑？真正优秀的程序员知道如何高效地工作，而不是用不止境的加班来完成工作任务。函数便是程序员高效工作的利器之一。</p><p>事实上，在前面的教程中，我们已经在使用函数了。例如，我们在每段代码的最后，都会调用 turtle.exitonclick() 函数。exitonclick 函数的作用就是让海龟画完图像之后保持住，不要退出，直到我们点击窗口的时候 (onclick)，才退出 (exit)。我们不需要知道函数 exitonclick 具体是怎样实现的，我们只需要在合适的地方调用它，使用它提供的功能就可以了。使用函数便是程序员高效工作的秘密（之一）。</p><p>那么，我们要如何定义自己的函数呢？</p><p>Python 中，我们使用 def 关键字来定义函数。请看下面这个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br></pre></td></tr></table></figure></p><p>  跟在关键字 def 之后的是函数名 line_without_moving。后面，我们就可以用 line_without_moving 这个函数名来调用它了。函数名之后，需要有一个冒号，告诉 python 接下来就是函数的具体内容（称为函数体）。</p><p>函数的功能就是通过函数体中的语句来实现的。注意到，函数体中的语句 (第2, 3 行) 和 def 所在的行 (第 1 行) 相比，要往右缩进了一些。Python 正是通过缩进来判断哪些语句是属于函数体中的语句（类似前面教程中谈到的，Python 用缩进来判断哪些语句属于循环体）。通常，我们用 4 个空格符来表示一级的缩进。</p><p>好了，让我们仔细看看 line_without_moving 的函数体（第 2, 3 行），看看这个函数实现的是什么功能？ turtle.forward(100) 前进 100 个单位距离， turtle.backward(100) 后退 100 个单位的距离，这一进一退，小海龟又回到了原来的位置，这不等于啥也没干吗？No No No！海龟虽然又回到的原来的位置，但它在爬行过程中，会在屏幕上留下痕迹，即画出线条。因此，line_without_moving 这个函数的作用就是让海龟沿着当前方向绘制一条长度为 100 个单位的线条，然后还要回到起始的位置，同时保持龟头的方向不变。</p><p>上面的代码，仅仅是定义了函数 line_without_moving。光定义函数是看不到直接的效果的，函数需要被使用（即被调用），函数体中的代码才能被执行，我们才能看到效果。例如，下面的代码，我们在 line_without_moving 函数定义之后，调用了它（第 7, 9, 11, 13 行）。调用方式为函数名之后，跟一个小括号。这样，我们就能看到函数调用之后的效果了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br><span class="line">line_without_moving()</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving()</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving()</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>运行上面的代码，我们可以看到一个十字型的图案。</p><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程004/001.png" alt=""></p><p>类似循环可以嵌套一样，函数也可以嵌套。上面画十字型的代码，还可以改写成下面的形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br><span class="line"></span><br><span class="line">def draw_cross():</span><br><span class="line">    line_without_moving()</span><br><span class="line">    turtle.right(90)</span><br><span class="line">    line_without_moving()</span><br><span class="line">    turtle.right(90)</span><br><span class="line">    line_without_moving()</span><br><span class="line">    turtle.right(90)</span><br><span class="line">    line_without_moving()</span><br><span class="line">draw_cross()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>第 7-14 行，定义了一个新的函数 draw_cross。第 16 行，调用 draw_cross 函数画十字，而 draw_cross 函数内部又调用了 line_without_moving 函数（第  8, 10, 12, 14 行），即函数嵌套函数。</p><p>进一步观察，我们发现 8-14 行的代码有许多是重复的。第 8, 9 行的代码，重复了 4 次。结合前面瓦力博士讲的循环，聪明的你是不是已经想到了如何进一步简化代码了呢？下面是瓦力博士给出的参考代码，是不是和你想的一样呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br><span class="line"></span><br><span class="line">def draw_cross():</span><br><span class="line">    for i in range(4):</span><br><span class="line">        line_without_moving()</span><br><span class="line">        turtle.right(90)</span><br><span class="line"></span><br><span class="line">draw_cross()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程004/002.png" alt=""></p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><img src="/2018/12/21/瓦力工厂/Python零基础快速入门趣味教程004/003.png" alt=""></p><p>蜂窝是由一系列的正六边形构成的，先编写一个绘制正六边的函数，再通过多次函数调用的方式绘制出多个正六边形<br>设计正六边形函数的时候，要让海龟在画完正六边形之后，再次回到起始的位置，并保持龟头方向不变，这样方便我们拼接多个正六边形构成蜂窝的图案<br>在考虑如何用多个正六边形构成蜂窝时，请忽略绘制正六边形的细节（请忘记龟头转了几度，海龟前进了多少距离等细节 ），只需要知道海龟在绘制单个正六边形时的旋转方向（顺时针还是逆时针），并且海龟在绘制正六边形之后，会回到起始的位置，并保持龟头方向不变<br>在函数调用时忽略函数内部的细节，这事实上就是一种抽象的思维，函数不仅是程序员“偷懒”的工具，更是程序员通过抽象思维，实现复杂逻辑的利器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>XKL-044-手弩</title>
    <link href="http://yoursite.com/2018/12/20/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/XKL-044-%E6%89%8B%E5%BC%A9/"/>
    <id>http://yoursite.com/2018/12/20/瓦力工厂/XKL-044-手弩/</id>
    <published>2018-12-20T03:19:50.020Z</published>
    <updated>2018-12-20T03:19:50.020Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>《诸葛亮传》：“亮性长于巧思，损益连弩，木牛流马，皆出其意。推演兵法，作八阵图，咸得其要。”注引《魏氏春秋》曰：亮作八务、七戒、六恐、五惧，皆有条章，以训厉臣子。又损益连弩，谓之元戎，以铁为矢，矢长八寸，一弩十矢俱发。”皆出其意，即指诸葛亮的创意、构思、设计，而由他人具体制作。</p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/001.png" alt=""></p><h3 id="学习目标-："><a href="#学习目标-：" class="headerlink" title="学习目标 ："></a>学习目标 ：</h3><p>1.了解弹力，作用力与反作用力。<br>2.了解棘轮、棘爪结构。</p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>作用力与反作用力：在经典力学里，牛顿第三定律（Newton’s third law）表明，当两个物体互相作用时，彼此施加于对方的力，其大小相等、方向相反。力必会成双结对地出现：其中一道力称为“作用力”；而另一道力则称为“反作用力”，又称“抗力”；两道力的大小相等、方向相反。它们之间的分辨，是纯然任意的；任何一道力都可以被认为是作用力，而其对应的力自然地成为伴随的反作用力。这成对的作用力与反作用力称为“配对力”。</p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/000.png" alt=""></p><p>棘轮机构：（ratchet and pawl），由棘轮和棘爪组成的一种单向间歇运动机构。棘轮机构常用在各种机床和自动机中间歇进给或回转工作台的转位上，也常用在千斤顶上。在自行车中棘轮机构用于单向驱动，在手动绞车中棘轮机构常用以防止逆转。棘轮机构工作时常伴有噪声和振动，因此它的工作频率不能过高。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/002.png" alt=""></p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/003.png" alt=""></p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/004.png" alt=""></p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/005.png" alt=""></p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/006.png" alt=""></p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/007.png" alt=""></p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/008.png" alt=""></p><p><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/009.png" alt=""></p><p>手弩已完成，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/20/瓦力工厂/XKL-044-手弩/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>fullstack-react-native</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/fullstack-react-native/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/fullstack-react-native/</id>
    <published>2018-12-18T14:27:13.621Z</published>
    <updated>2018-12-18T14:27:13.621Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Platform-specific-properties"><a href="#Platform-specific-properties" class="headerlink" title="Platform specific properties"></a>Platform specific properties</h3><p>The Platform API allows us to conditionally apply different styles or properties in our component<br>based on the device’s operating system. The OS attribute of the object returns either iOS or android<br>depending on the user’s device.</p><p>Although this is a relatively simple way to apply different properties in our application based on<br>the user’s device, there may be scenarios where we may want our component to be substantially<br>different between operating systems.<br>We can also use the Platform.select method that takes the operating system as keys within an<br>object and returns the correct result based on the device:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">textStyle: &#123;</span><br><span class="line">textAlign: &apos;center&apos;,</span><br><span class="line">...Platform.select(&#123;</span><br><span class="line">ios: &#123;</span><br><span class="line">fontFamily: &apos;AvenirNext-Regular&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">android: &#123;</span><br><span class="line">fontFamily: &apos;Roboto&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="Separate-files"><a href="#Separate-files" class="headerlink" title="Separate files"></a>Separate files</h4><p>Instead of applying conditional checks using Platform.OS a number times throughout the entire<br>component file, we can also leverage the use of platform specific files instead. We can create<br>two separate files to represent the same component each with a different extension: .ios.js and<br>.android.js . If both files export the same component class name, the React Native packager knows<br>to choose the right file based on the path extension. We’ll dive deeper into platform specific<br>differences later in this book.</p><h3 id="Text-input"><a href="#Text-input" class="headerlink" title="Text input"></a>Text input</h3><p>We now have text fields that display the location, weather condition, and temperature. The next<br>thing we need to do is provide some sort of input to allow the user to search for a specific city.<br>Again, we’ll continue using hardcoded data for now. We’ll only begin using an API for real data<br>once we have all of our components in place.<br>React Native provides a built-in TextInput component that we can import into our component<br>that allows us to accept user input. Let’s include it within our View container underneath the Text<br>components (make sure to import it as well!):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;Text style=&#123;[styles.largeText, styles.textStyle]&#125;&gt;San Francisco&lt;/Text&gt;</span><br><span class="line">&lt;Text style=&#123;[styles.smallText, styles.textStyle]&#125;&gt;Light Cloud&lt;/Text&gt;</span><br><span class="line">&lt;Text style=&#123;[styles.largeText, styles.textStyle]&#125;&gt;24°&lt;/Text&gt;</span><br><span class="line">&lt;TextInput</span><br><span class="line">autoCorrect=&#123;false&#125;</span><br><span class="line">placeholder=&quot;Search any city&quot;</span><br><span class="line">placeholderTextColor=&quot;white&quot;</span><br><span class="line">style=&#123;styles.textInput&#125;</span><br><span class="line">clearButtonMode=&quot;always&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>There are a number of props associated with TextInput that we can use. We’ll cover the basics<br>here but go into more detail about them in the “Core Components” chapter. Here we’re specifying<br>a placeholder, its color, as well as a style for the component itself. Let’s create its style object,<br>textInput , underneath our other styles:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">smallText: &#123;</span><br><span class="line">fontSize: 18,</span><br><span class="line">&#125;,</span><br><span class="line">textInput: &#123;</span><br><span class="line">backgroundColor: &apos;#666&apos;,</span><br><span class="line">color: &apos;white&apos;,</span><br><span class="line">height: 40,</span><br><span class="line">width: 300,</span><br><span class="line">marginTop: 20,</span><br><span class="line">marginHorizontal: 20,</span><br><span class="line">paddingHorizontal: 10,</span><br><span class="line">alignSelf: &apos;center&apos;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>As we mentioned previously, all the attributes that we provide styles with in React Native are<br>extremely similar to how we would apply them using CSS. Now let’s take a look at our application:</p><p><img src="/2018/12/18/瓦力工厂/fullstack-react-native/001.png" alt=""></p><p>We can see that the text input has a default underline on Android. We’ll go over how to remove this<br>in a bit.<br>We’ve also specified the clearButtonMode prop to be always . This shows a button on the right side<br>of the input field when characters are inserted that allows us to clear the text. This is only available<br>on iOS.</p><p><img src="/2018/12/18/瓦力工厂/fullstack-react-native/002.png" alt=""></p><p>If you’re using the iOS simulator, you can connect your hardware keyboard and use that with<br>any input field. This can be done with Shift + ⌘ + K or going to Hardware -&gt; Keyboard -&gt;<br>Connect Hardware Keyboard<br>With this enabled, the software keyboard may not show by default. You can toggle this by<br>pressing ⌘ + K or going to Hardware -&gt; Keyboard -&gt; Toggle Software Keyboard<br>Now every time you click an input field, the software keyboard will display exactly how it<br>would if you were using a real device and you can type using your hardware keyboard.</p><p>However one thing you may have noticed is that when you focus on the input field with a tap, the<br>keyboard pops up and covers it on Android and comes quite close on iOS:</p><p><img src="/2018/12/18/瓦力工厂/fullstack-react-native/003.png" alt=""></p><p>Since the virtual keyboard can cover roughly half the device screen, this is a common prob-<br>lem that occurs when using text inputs in an application. Fortunately, React Native includes<br>KeyboardAvoidingView , a component that solves this problem by allowing us to adjust where other<br>components render in relation to the virtual keyboard. Let’s import and use this component instead<br>of View :</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;KeyboardAvoidingView style=&#123;styles.container&#125; behavior=&quot;padding&quot;&gt;</span><br><span class="line">&lt;Text style=&#123;[styles.largeText, styles.textStyle]&#125;&gt;San Francisco&lt;/Text&gt;</span><br><span class="line">&lt;Text style=&#123;[styles.smallText, styles.textStyle]&#125;&gt;Light Cloud&lt;/Text&gt;</span><br><span class="line">&lt;Text style=&#123;[styles.largeText, styles.textStyle]&#125;&gt;24°&lt;/Text&gt;</span><br><span class="line">&lt;TextInput</span><br><span class="line">autoCorrect=&#123;false&#125;</span><br><span class="line">placeholder=&quot;Search any city&quot;</span><br><span class="line">placeholderTextColor=&quot;white&quot;</span><br><span class="line">style=&#123;styles.textInput&#125;</span><br><span class="line">clearButtonMode=&quot;always&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/KeyboardAvoidingView&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notice that KeyboardAvoidingView accepts a behavior prop with which we can customize how the<br>keyboard adjusts. It can change its height, position or bottom padding in relation to the position of<br>the virtual keyboard. Here, we’ve specified padding .<br>Now tapping the text input will shift our component text and input fields out of the way of the<br>software keyboard.</p><p><img src="/2018/12/18/瓦力工厂/fullstack-react-native/004.png" alt=""></p><h3 id="Custom-components"><a href="#Custom-components" class="headerlink" title="Custom components"></a>Custom components</h3><p>So far, we’ve explored how to add styling into our application, and we’ve included some built-in<br>components into our main App component. We use View as our component container and import<br>Text and TextInput components in order to display hardcoded weather data as well as an input<br>field for the user to change locations.<br>It’s important to re-iterate that React Native is component-driven. We’re already representing our<br>application in terms of components that describe different parts of our UI without too much effort,<br>and this is because React Native provides a number of different built-in components that you can<br>use immediately to shape and structure your application.<br>However, as our application begins to grow, it’s important to begin thinking of how it can further<br>be broken down into smaller and simpler chunks. We can do this by creating custom components<br>that contain a small subset of our UI that we feel fits better into a separate, distinct component<br>file. This is useful in order to allow us to further split parts of our application into something more<br>manageable, reusable and testable.<br>Although our application in its current state isn’t extremely large or unmanageable, there’s still some<br>room for improvement. The first way we can refactor our component is to move our TextInput intoa separate component to hide its implementation details from the main App component. Let’s create<br>a components directory in the root of the application with the following file:<br>├── components/</p><ul><li>SearchInput.js<br>All the custom components we create that we use in our main App component will live inside this<br>directory. For more advanced apps, we might create directories within components to categorize<br>them more specifically. Since this app is pretty simple, let’s use a flat components directory.<br>The SearchInput will be our first custom component so let’s move all of our code for TextInput<br>from App.js to SearchInput.js :</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123; StyleSheet, TextInput, View &#125; from &apos;react-native&apos;;</span><br><span class="line">export default class SearchInput extends React.Component &#123;</span><br><span class="line">render() &#123;</span><br><span class="line">return (</span><br><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">&lt;TextInput</span><br><span class="line">autoCorrect=&#123;false&#125;</span><br><span class="line">placeholder=&#123;this.props.placeholder&#125;</span><br><span class="line">placeholderTextColor=&quot;white&quot;</span><br><span class="line">underlineColorAndroid=&quot;transparent&quot;</span><br><span class="line">style=&#123;styles.textInput&#125;</span><br><span class="line">clearButtonMode=&quot;always&quot;</span><br><span class="line">/&gt;</span><br><span class="line">&lt;/View&gt;</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const styles = StyleSheet.create(&#123;</span><br><span class="line">container: &#123;</span><br><span class="line">height: 40,</span><br><span class="line">marginTop: 20,</span><br><span class="line">backgroundColor: &apos;#666&apos;,</span><br><span class="line">marginHorizontal: 40,</span><br><span class="line">paddingHorizontal: 10,</span><br><span class="line">borderRadius: 5,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">textInput: &#123;</span><br><span class="line">flex: 1,</span><br><span class="line">color: &apos;white&apos;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Let’s break down what this file contains:<br>• We export a component named SearchInput .<br>• This component accepts a placeholder prop.<br>• This component returns a React Native TextInput with a few of its properties specified<br>wrapped within a View . We’ve applied the appropriate styles to our view container including<br>a borderRadius . We also added underlineColorAndroid=”transparent” to remove the dark<br>underline that shows by default on Android.</p><p>this is a special keyword in JavaScript. The details about this are a bit nuanced, but for the<br>purposes of the majority of this book, this will be bound to the React Native component<br>class. So, when we write this.props inside the component, we’re accessing the props<br>property on the component. When we diverge from this rule in later sections, we’ll point it<br>out.<br>For more details on this, check out this page on MDN 35 .</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>装甲车机器人</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E8%A3%85%E7%94%B2%E8%BD%A6%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/装甲车机器人/</id>
    <published>2018-12-18T13:10:43.301Z</published>
    <updated>2018-11-04T08:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>瓦力工程师接到一个新任务，就是为“国防部”设计装甲车。来满足国防和维稳中用装甲车反坦克、扫雷、通讯和反恐的需要。现在要求制作发射导弹的装甲车，导弹发射时的角度可以自由调整。<br><img src="/2018/12/18/瓦力工厂/装甲车机器人/001.jpg" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/002.jpg" alt=""></p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要有轮子（为什么呢？观察生活）<br>３．需要有前进、加速、减速、停止、转弯、后退的控制方法<br>４．需要有装甲车的形状、特点。<br>5.调整发射角度，利用马达导杆，控制发射角度。</p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>装甲车是具有装甲防护的各种履带或轮式军用车辆，是装有装甲的军用或警用车辆的统称。坦克也是装甲车履带式装甲车辆的一种，但是在习惯上通常因作战用途另外独立分类，而装甲车辆多半是指防护力与火力较坦克弱的车种。<br>装甲车的特性为具有高度的越野机动性能，有一定的防护和火力作用，分为履带式和轮式两种，一般装备一至两门中小口径火炮及数挺机枪，一些还装有反坦克导弹，结构以装甲车体、武器系统、动力装置等组成。</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、轮子、CPU、触碰开光、LED灯、蜂鸣器，伺服马达，导杆系统<br><img src="/2018/12/18/瓦力工厂/装甲车机器人/003.jpg" alt=""></p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>1.三个马达的控制方法<br>2.了解装甲车的基础知识。<br>3.了解导杆系统在控制系统角度方面的应用。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_07.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_08.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_09.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_10.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_11.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_12.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_13.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_14.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_15.png" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_16.jpg" alt=""><br><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_17.jpg" alt=""></p><h3 id="装甲车机器人程序设计："><a href="#装甲车机器人程序设计：" class="headerlink" title="装甲车机器人程序设计："></a>装甲车机器人程序设计：</h3><p><img src="/2018/12/18/瓦力工厂/装甲车机器人/装甲车机器人_18.jpg" alt=""><br>装甲车机器人，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/18/瓦力工厂/装甲车机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>接力赛机器人</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E6%8E%A5%E5%8A%9B%E8%B5%9B%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/接力赛机器人/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-10T02:31:27.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>瓦力工程师接到一个新任务，新年快要到了，瓦力工厂要求瓦li工程师为新年增加气氛。组织一场新年接力赛。要求我们瓦力工程师为接力在设计机器人。<br><img src="/2018/12/18/瓦力工厂/接力赛机器人/001.png" alt=""></p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要有轮子（为什么呢？观察生活）<br>３．需要有前进、停止、的控制方法（不能手动）</p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>接力跑，是田径运动中唯一的集体项目。以队为单位，每队4人，每人跑相同距离。其起源有多种说法，有的认为起源于古代奥运会祭祀仪式中的火炬传递，有的认为与非洲盛行的”搬运木料”或”搬运水坛”游戏有关，也有的认为是从传递信件文书的邮驿演变而来。<br>接力跑引入体育比赛，不只是田径项目，在不少其他体育活动中也有类似的比赛。就田径而言，其起源是诸说不，主要有<br>两种说法：<br>一种说法是由非洲黑人接力运送木材演变而来的。非洲人在茂密的森林中砍伐木料后，道路崎岖，运送困难，于是采用了接力的方法。搬运过程中，彼此进行速度比赛，看谁搬的快，运的多。<br>另一种说法是在十七世纪时，葡萄牙一艘军舰外出，水兵上岸游玩，发现当地居民聚在一起进行一种有趣的游戏。参加者分成若干组，每组4人，每组有一人拿着空坛，比赛开始后，持空坛的人迅速跑向50米外的水坛，将水倒人空坛，然后拿着空坛跑回交给本组第二人。如此循环往复，直到全组跑完，最先跑完者获胜。葡萄牙水兵将这种游戏带入欧洲，并加以改变，以木棒代替空坛，很快就成为学校中的一项活动，以后又演变成田径运动中的接力赛。</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、轮子、CPU、触碰开光、附件</p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>课程目标：<br>1.了解接力赛的起源<br>2.根据接力任务自主搭建机器人<br>3．综合使用学习的编程模块自主编程<br><img src="/2018/12/18/瓦力工厂/接力赛机器人/003.png" alt=""></p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/18/瓦力工厂/接力赛机器人/004.png" alt=""><br><img src="/2018/12/18/瓦力工厂/接力赛机器人/005.png" alt=""><br><img src="/2018/12/18/瓦力工厂/接力赛机器人/006.png" alt=""><br><img src="/2018/12/18/瓦力工厂/接力赛机器人/007.png" alt=""><br><img src="/2018/12/18/瓦力工厂/接力赛机器人/008.png" alt=""><br><img src="/2018/12/18/瓦力工厂/接力赛机器人/009.png" alt=""><br><img src="/2018/12/18/瓦力工厂/接力赛机器人/010.png" alt=""><br><img src="/2018/12/18/瓦力工厂/接力赛机器人/011.png" alt=""></p><h3 id="接力赛机器人程序设计："><a href="#接力赛机器人程序设计：" class="headerlink" title="接力赛机器人程序设计："></a>接力赛机器人程序设计：</h3><p><img src="/2018/12/18/瓦力工厂/接力赛机器人/012.png" alt=""><br>接力赛机器人已完成，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/18/瓦力工厂/接力赛机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>批量缩小图片</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E6%89%B9%E9%87%8F%E7%BC%A9%E5%B0%8F%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/批量缩小图片/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-19T11:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="驱动需求"><a href="#驱动需求" class="headerlink" title="驱动需求:"></a>驱动需求:</h3><p>最近做了一段时间教程，发现做的网站打开非常慢，打开单张图片的属性一看，竟然每张都1-2M，网站打开不满才有问题呢？于是在网上找批量压缩图片的软件。</p><p>功夫不负有心人，终于找到了 imagemagick</p><p>先来看看 ImageMagick 能做些什么：<br>1、批量旋转、分割，并顺序编号<br>2、自动批量切除白边（auto-crop）<br>3、自动倾斜校正（deskew）<br>4、批量加标注<br>5、批量去标注<br>6、批量加水印<br>7、批量去水印<br>一、最基本的格式转换<br>下面，我将结合与扫书制书有关的图像操作，来说明 IM 的用法。</p><p>前面已经说过，IM 由一组命令行工具组成，具体来说也就是 convert、mogrify、composite、montage、identify、compare、display、animate、stream、import 和 conjure，这 11 个命令。</p><p>其中最常用的，是 convert 和 mogrify。</p><p>1、将 a.gif 转为 png 格式<br>    convert a.gif a.png<br>请注意，convert 命令的基本格式为<br>    convert 源文件 [参数] 目标文件<br>在上面的命令中，源文件是 a.gif，目标文件是 a.png。由于这是最简单的格式转换，所以不需要中间的参数。<br>convert 常用于单个文件的转换。上面的命令是它最基本的用法。</p><p>前面说过 IM 支持超过 100 种的文件格式。<br>下面的命令，可以列出 IM 所支持的所有格式：<br>    identify -list format</p><p>2、批量文件的格式转换</p><pre><code>mogrify -path newdir -format png  *.gif</code></pre><p>这个命令的作用，是将当前目录下的所有 gif 文件，转换为 png 格式，并将其存放在 newdir 目录下。</p><p>mogrify 是用于批量处理文件的命令。它的基本格式是这样的：<br>    mogrify 参数 源文件<br>mogrify 支持基本的通配符，例如你可以用 a*.png 指代所有以 a 打头的 png 文件，诸如此类。</p><p>再回到刚才的命令：</p><pre><code>mogrify -path newdir -format png  *.gif</code></pre><p>这里的 -path 和 -format 是两个可选择的参数。<br>-format 指定输出的文件格式，而 -path 则指定输出的文件目录。</p><p>我在这里先强调一下：如果不加 -path 参数的话，mogrify 有可能会覆盖你的源文件，因此强烈推荐在每个 mogrify 命令里都加上 -path 参数，并在执行之前，先检查整个命令正确性。</p><p>二、图像的缩放：使用 -resize<br>IM 有好几种缩放图像的方法，在这里我只讲最基本的 resize 命令。</p><p>将一个200x304大小的图像缩小为100x152（长宽各缩短一半）。</p><pre><code>convert page200.png -resize 100x152 page100.png</code></pre><p>上面的 100x152，指定了目标文件的长和宽。</p><p>你也可以只指定目标文件宽度，这样它的高度会等比例放大：</p><pre><code>convert page200.png -resize 100 page100.png</code></pre><p>或者只指定高度：</p><pre><code>convert page200.png -resize x152 page100.png</code></pre><p>以上三句命令，其结果都是一样的。</p><p>你可以用 identify 命令来显示图像的尺寸以及其它一些信息：<br>    identify page100.png<br>其结果为：</p><p>page100.png PNG 100x152 100x152+0+0 8-bit DirectClass 17.9kb</p><p>最后，你还可以通过指定百分比来缩放图像：</p><pre><code>convert page200.png -resize 50% page100.pngconvert page200.png -resize 150% page300.png</code></pre><p>批量缩放图像</p><pre><code>mogrify -path newdir -resize 200% *.png</code></pre><p>这句命令的意思是将当前目录中所有的 png 文件都放大一倍，并存放到 newdir 目录中。</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p> 就这样一行命令就实现了图片的压缩，试了一下，大概压缩到200K左右，清晰度还能满足要求。<br> 但是，这样的命令行只能进行当前文件夹的图片压缩。和linux -R 递归参数并不匹配。<br> 最后用 Bash程序解决<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> #!/bin/bash</span><br><span class="line">echo &quot;resize image who is bigger than 200k&quot;;</span><br><span class="line">for i in `find . -size +200k`;</span><br><span class="line">do</span><br><span class="line">convert $i -resize 40% $i;</span><br><span class="line">echo &quot;resize image $i to 40%&quot;;</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>只能说，编程让生活如此简单！</p><p>有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/18/瓦力工厂/批量缩小图片/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>滑板车机器人</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E6%BB%91%E6%9D%BF%E8%BD%A6%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/滑板车机器人/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-03T02:17:46.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>瓦力工程师接到一个新任务，就是为“最后一公里”设计机器人。“最后一公里”指的是人们在上下学或上下班的途中，乘坐公共交通工具到达公交站，地铁站后，还需要走最后一公里才能达到目的地。作为瓦力工程师的我们怎么设计滑板车机器人，来帮助人们更方便的完成最后一公里呢？<br><img src="/2018/12/18/瓦力工厂/滑板车机器人/002.jpg" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/003.jpg" alt=""></p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要有轮子（为什么呢？观察生活）<br>３．需要有前进、加速、减速、停止、转弯、后退？的控制方法<br>４．需要有声光指示、装饰</p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>平衡车原理：当我们在驾驶平衡车的时候，平衡车的两个轮子就代替了双脚。与身体的平衡系统非常类似，当我们的重心前倾时，智能系统就会自动感应到，并精确地驱动轮子向前运动，以保持平衡;同样地，当我们身体的重心后倾时，轮子就会向后运动。<br>这套工作原理被称为“动态平衡”原理，这也是平衡车被叫做“平衡车”的原因，采用第二代运动补偿算法，利用其内部的陀螺仪和加速度传感器，来精确检测车体姿态的微小变化，并利用精密的伺服控制系统，灵敏地驱动电机，进行相应的调整，以保持整个车体的稳定和平衡。</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、轮子、CPU、触碰开光、LED灯、蜂鸣器<br><img src="/2018/12/18/瓦力工厂/滑板车机器人/004.png" alt=""></p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>1.复习触碰开关的工作原理。<br>2.了解人们的代步工具。<br>3.熟练运用循环模块（While）进行输入、输出控制。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_06.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_07.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_08.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_09.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_10.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_11.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_12.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_13.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_14.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_15.png" alt=""><br><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_16.png" alt=""></p><h3 id="程序设计："><a href="#程序设计：" class="headerlink" title="程序设计："></a>程序设计：</h3><p><img src="/2018/12/18/瓦力工厂/滑板车机器人/滑板车机器人_17.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>每日点滴</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E6%AF%8F%E6%97%A5%E7%82%B9%E6%BB%B4/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/每日点滴/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-10T01:58:00.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="在Markdown中插入代码块"><a href="#在Markdown中插入代码块" class="headerlink" title="在Markdown中插入代码块"></a>在Markdown中插入代码块</h3><figure class="highlight plain"><figcaption><span>[title] [] [url] [link text]</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code snippet</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&apos;Hello World!&apos;);</span><br></pre></td></tr></table></figure><h4 id="另一种常用"><a href="#另一种常用" class="headerlink" title="另一种常用"></a>另一种常用</h4><p>三个反引号</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#/bin/python3</span><br><span class="line">print&#123;&quot;helloworld&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="在markdown-插入公式"><a href="#在markdown-插入公式" class="headerlink" title="在markdown 插入公式"></a>在markdown 插入公式</h3><p>Hexo 输入数学公式主要通过MathJax 渲染LaTeX 公式实现的，具体开启步骤以及简要语法介绍如下。</p><h4 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h4><p>在next 主题配置文件_config.yaml 中找到 MathJax 选项，将enable 改成 true 即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MathJax Support</span><br><span class="line">mathjax:</span><br><span class="line">    enable: true</span><br><span class="line">    per_page: false</span><br><span class="line">    cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</span><br></pre></td></tr></table></figure></p><h4 id="页面插入"><a href="#页面插入" class="headerlink" title="页面插入"></a>页面插入</h4><p>页面插入公式有两种形式，一是行内插入公式不居中显示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$公式$</span><br></pre></td></tr></table></figure></p><p>例如$E=mc^2$$</p><p>第二种是行间插入公式，居中显示：<br>例如$$S=\pi*r^2$$</p><h4 id="语法公式"><a href="#语法公式" class="headerlink" title="语法公式"></a>语法公式</h4><p>[公式]<a href="https://www.jianshu.com/p/e4d4433d418a%}" target="_blank" rel="noopener">https://www.jianshu.com/p/e4d4433d418a%}</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">语法公式</span><br><span class="line">关于公式的语法格式，主要有以下常用：</span><br><span class="line"></span><br><span class="line">上下标</span><br><span class="line">^ 表示上标，_ 表示下标。</span><br><span class="line"></span><br><span class="line">$$a_&#123;1&#125; x^&#123;2&#125; $$</span><br><span class="line">$$e^&#123;-\alpha t&#125; $$</span><br><span class="line">$$a^&#123;i&#125;_&#123;ij&#125;$$</span><br><span class="line">$$e^&#123;x^2&#125; \neq &#123;e^x&#125;^2$$</span><br><span class="line">$$a_&#123;1&#125;$$</span><br><span class="line"></span><br><span class="line">$$x^&#123;2&#125;$$</span><br><span class="line">$$e^&#123;-\alpha t&#125;$$</span><br><span class="line">$$a^&#123;i&#125;_&#123;ij&#125;$$</span><br><span class="line">$$e&#123;x2&#125; \neq &#123;ex&#125;2$$</span><br><span class="line"></span><br><span class="line">此外，如果左右两边都有上下标，则使用 \sideset 命令，效果如下：</span><br><span class="line"></span><br><span class="line">\sideset&#123;^xy&#125;&#123;^xy&#125;\bigotimes</span><br><span class="line">$$\sideset&#123;xy&#125;&#123;xy&#125;\bigotimes$$</span><br><span class="line"></span><br><span class="line">平方根</span><br><span class="line">平方根输入命令为 \sqrt，n次方根命令为 \sqrt[n]，其符号大小由LaTeX 自动给定：</span><br><span class="line"></span><br><span class="line">$$\sqrt&#123;x&#125;$$ $$\sqrt&#123;x^2+\sqrt&#123;y&#125;$$ $$\sqrt[3]&#123;2&#125;$$</span><br><span class="line">$$\sqrt&#123;x&#125;$$</span><br><span class="line"></span><br><span class="line">$$ \sqrt&#123;x^2+\sqrt&#123;y&#125;&#125;$$</span><br><span class="line"></span><br><span class="line">$$\sqrt[3]&#123;2&#125;$$</span><br><span class="line"></span><br><span class="line">水平线</span><br><span class="line">使用 \overline 和 \underline 分别在表达式上下方画出水平线：</span><br><span class="line"></span><br><span class="line">$$\overline&#123;m + n&#125;$$</span><br><span class="line">$$\underline&#123;m + n&#125;$$</span><br><span class="line">$$\overline&#123;m + n&#125;$$</span><br><span class="line">$$\underline&#123;m + n&#125;$$</span><br><span class="line"></span><br><span class="line">水平大括号</span><br><span class="line">命令 \overbrace 和 \underrace，效果如下：</span><br><span class="line"></span><br><span class="line">$$\underbrace&#123;a+b+\cdots+z&#125;$$</span><br><span class="line">$$\overbrace&#123;a+b+\cdots+z&#125;$$</span><br><span class="line">$$\overbrace&#123;a+b+\cdots+z&#125;$$</span><br><span class="line"></span><br><span class="line">$$\underbrace&#123;a+b+\cdots+z&#125;$$</span><br><span class="line"></span><br><span class="line">矢量</span><br><span class="line">矢量的命令是 \vec，用于单个字母的向量表示。\overrightarrow 和\overleftarrow 分别表示向右和向左的向量箭头：</span><br><span class="line"></span><br><span class="line">$$\vec&#123;a&#125;$$</span><br><span class="line">$$\overrightarrow&#123;AB&#125;$$</span><br><span class="line">$$\overleftarrow&#123;BA&#125;$$</span><br><span class="line">$$\vec&#123;a&#125;$$</span><br><span class="line">$$\overrightarrow&#123;AB&#125;$$</span><br><span class="line">$$\overleftarrow&#123;BA&#125;$$</span><br><span class="line"></span><br><span class="line">分数</span><br><span class="line">分数使用 \frac&#123;...&#125;&#123;...&#125; 进行排版：</span><br><span class="line"></span><br><span class="line">$$1\frac&#123;1&#125;&#123;2&#125;$$</span><br><span class="line">$$\frac&#123;x^2&#125;&#123;k+1&#125;$$</span><br><span class="line">$$x^&#123;1/2&#125;$$</span><br><span class="line">$$1\frac&#123;1&#125;&#123;2&#125;$$</span><br><span class="line">$$\frac&#123;x^2&#125;&#123;k+1&#125;$$</span><br><span class="line">$$x^&#123;1/2&#125;$$</span><br><span class="line"></span><br><span class="line">积分运算符</span><br><span class="line">积分运算符使用 \int 生成。求和运算符使用 \sum 生成。乘积运算符使用 \prod 生成。上下限使用^ 和_ 命令，类似 上下标：</span><br><span class="line"></span><br><span class="line">$$\sum_&#123;i=1&#125;^&#123;n&#125;$$</span><br><span class="line">$$\int_&#123;0&#125;^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125;$$</span><br><span class="line">$$\prod_\epsilon$$</span><br><span class="line">$$\sum_&#123;i=1&#125;^&#123;n&#125;$$</span><br><span class="line">$$\int_&#123;0&#125;^&#123;\frac&#123;\pi&#125;&#123;2&#125;&#125;$$</span><br><span class="line">$$\prod_\epsilon$$</span><br><span class="line"></span><br><span class="line">希腊字母</span><br><span class="line">$\alpha$ \alpha $\beta$ \beta $\gamma$ \gamma $\delta$ \delta $\epsilon$ \epsilon</span><br><span class="line"></span><br><span class="line">字体转换</span><br><span class="line">要对公式的某一部分字符进行字体转换，可以用&#123;\rm需转换的部分字符&#125;命令，其中\rm可以参照下表选择合适的字体。</span><br><span class="line">一般情况下，公式默认为意大利体。</span><br><span class="line"></span><br><span class="line">\rm 罗马体 \rm test \it 意大利体 \it test</span><br><span class="line"></span><br><span class="line">\bf 黑体 \bf test \cal 花体 \cal test</span><br><span class="line"></span><br><span class="line">\sl 倾斜体 \sl test \sf 等线体 \sf test</span><br><span class="line"></span><br><span class="line">\mit 数学斜体 \mit test \tt 打字机字体 \tt test</span><br><span class="line"></span><br><span class="line">\sc 小体大写字母 \sc test</span><br></pre></td></tr></table></figure></p><p><img src="/2018/12/18/瓦力工厂/每日点滴/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DPJ-046-鳐鱼机器人</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/DPJ-046-%E9%B3%90%E9%B1%BC%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-18T03:53:06.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>武器装备部要求瓦力工厂制造一种仿生鱼，用于侦测水下敌方的潜艇，瓦力工厂把这个光荣的任务交给我们瓦力工程师，为了保家卫国，维护世界的和平，我们瓦力工程师流点汗，加点班也没什么。技术在手，什么都有，NO Problem！</p><p><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/002.jpg" alt=""></p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>鱼身体呈流线型中间大两头小，身体表面覆盖鳞片，保护身体；鳞片表面有一层粘液，游泳时减小水的阻力；身体两侧有一行侧线，侧线和神经相连，主要是测定方向和感知水流的作用；鱼的身体长有胸鳍、背鳍、腹鳍和尾鳍是鱼在水中的运动器官；体内有鳔，主要作用是调节身体的比重，鳔在鳍的协同下，可以使鱼停留在不同的水层里。<br>鱼鳍的作用：背鳍和臀鳍主要在行动时起稳定作用和平衡作用。尾鳍和体侧肌肉配合，起推动鱼体和掌握方向的作用。胸鳍和腹鳍的主要作用是保持鱼体平衡，配合鱼体转向，调整鱼体升降。但胸鳍比腹鳍用途更广，可以像船桨一样，一下一下地划动，使鱼体徐徐前进。</p><p><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/001.jpg" alt=""></p><p>鳐鱼，属于软骨鱼纲鳐形目 Rajiformes和鲼形鱼目，是多种扁体软骨鱼的统称。分布于全世界大部分水区，从包括2亚目，共8科约49属315种。中国产6科8属28种。我国各地俗称不一，舟山渔民称黄貂鳐叫黄虎，称蝠鲼叫燕子花鱼、黑虎、双头花鱼，称何氏鳐叫猫猫花鱼，而胶东渔民则叫劳子鱼、老板鱼。鳐鱼体型大小各异，小鳐成体仅50厘米，大鳐可长达8米。鳐鱼无害，底栖，常常部分埋于水底沙中。</p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要有伺服马达控制鱼尾游动。<br>３．需要控制伺服马达的指令。</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、马达、伺服马达、CPU、触碰开关、附件</p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>1.伺服马达的认识与应用.<br>2.伺服马达的多功能用途.<br>3.遥控器控制双马达分开编程。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/004.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/005.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/006.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/007.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/008.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/009.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/010.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/011.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/012.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/013.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/014.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/015.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/016.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/017.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/018.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/019.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/020.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/021.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/022.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/023.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/024.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/025.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/026.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/027.png" alt=""></p><h3 id="接力赛机器人程序设计："><a href="#接力赛机器人程序设计：" class="headerlink" title="接力赛机器人程序设计："></a>接力赛机器人程序设计：</h3><p><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/017.png" alt=""><br>道闸机器人已完成，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/18/瓦力工厂/DPJ-046-鳐鱼机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DPJ-021感应机器人</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/DPJ-021%E6%84%9F%E5%BA%94%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/DPJ-021感应机器人/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-17T08:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>小瓦力来到一处神秘的宫殿，瓦力打开宫殿大门，刚走出一步，突然感到脚下的石头像一个开关一样咯地响了一声，然后抬头一看，一块石头从正上方掉了下来，看来有机关，危险。迅速后退。不能灵活躲避落石的机器人永远无法通过最后的机关，瓦力心里想到。怎么办呢？有了，用螳螂机器人带我过去。</p><p><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/001.jpeg" alt=""></p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>螳螂是昆虫中体型偏大的，体长一般55到105毫米，非洲的螳螂是世界最<br>螳螂。大的，身体流线型，以绿色，褐色为主，也具有花斑的种类；标志性特征是有两把“大刀”，即前肢，上有一排坚硬的锯齿，大刀钩末端长有攀爬的吸盘。头部呈扇形，较小；复眼突出，大而透亮，以黄绿色为主，晚上在灯光下呈现黑色，单眼，在两眼之间有3个小点即单眼；触角细长；颈部可180度转动；咀嚼式口器，上颚强劲。前足腿节和胫节有利刺，胫节镰刀状，常向腿节折叠，形成可以捕捉猎物的前足；前翅轻柔，遮住身体全部为覆翅，后翅比前翅要薄，边缘透明色，中间成放射状的紫红色、伸展开呈现扇状，休息时收敛和前翅相合；腹部肥大。前足锋利发达善于捕捉，中、后足适于步行，但有时前足也会用来保持平衡，发育呈变态发育。</p><p> 红外避障传感器基本原理：利用物体的反射性质。在一定范围内，如果没有障碍物，发射出去的红外线，因为传播距离越远而逐渐减弱，最后消失。如果有障碍物，红外线遇到障碍物，被反射到达传感器接收头。传感器检测到这一信号，就可以确认正前方有障碍物，并送给单片机，单片机进行一系列的处理分析，协调小车两轮工作，完成一个漂亮的躲避障碍物动作。</p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要有轮子（为什么呢？观察生活）<br>３．需要有前进、后退、转弯的控制方法（不能手动）</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、马达、轮子、CPU、红外避障传感器、附件</p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>课程目标：<br>1.自然界的光线<br>2.红外传感器的原理<br>3．如果那么模块的使用</p><p><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/002.jpeg" alt=""></p><p><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/003.jpeg" alt=""></p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/004.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/005.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/006.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/007.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/008.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/009.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/010.png" alt=""></p><h3 id="接力赛机器人程序设计："><a href="#接力赛机器人程序设计：" class="headerlink" title="接力赛机器人程序设计："></a>接力赛机器人程序设计：</h3><p><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/011.png" alt=""><br>感应机器人已完成，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/18/瓦力工厂/DPJ-021感应机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>日积月累</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E6%97%A5%E7%A7%AF%E6%9C%88%E7%B4%AF/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/日积月累/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-10T03:43:30.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="瓦力币的含义"><a href="#瓦力币的含义" class="headerlink" title="瓦力币的含义"></a>瓦力币的含义</h3><p>红色：比赛<br>绿色：团队<br>蓝色：动手<br>黄色：语言<br>紫色：全勤</p><h3 id="遥控板连接"><a href="#遥控板连接" class="headerlink" title="遥控板连接"></a>遥控板连接</h3><p>6按键遥控接收板印有红框内标记的 ”瓦力工厂“ 字样！接收板连接到接收板的 “RXD” 引脚位置</p><p><img src="/2018/12/18/瓦力工厂/日积月累/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DPJ-016-道闸机器人</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/DPJ-016-%E9%81%93%E9%97%B8%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-17T10:37:33.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>小瓦力工程师爸爸的单位要改造进出的大门，要求有自动道闸系统，这项任务单位交给了小瓦力工程师的爸爸，可把爸爸急坏了。小瓦力工程师听说后，自告奋勇的对爸爸说，这事交给我，对于这样的问题，我们瓦力工程师只能说NO Problem！</p><p><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/001.jpg" alt=""></p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>道闸控制板根据操作指令控制电机进行正向反转;电机带动减速机输入轴转动;减速机在减速输出轴并带动摇臂在后半周180º的上下转动;减速机摇臂通过下关节轴承、连杆、上关节轴承带动主轴驱动臂在后半周90º范围内作上下运动;主轴驱动臂驱动与主轴连接的闸杆在水平与垂直的90º范围内作升降运动。</p><p>ETC是不停车电子收费系统，ETC专用车道是给那些装了ETC车载器的车辆使用的，采用电子收费方式．<br>ETC( Electronic Toll Collection ) 不停车收费系统是目前世界上最先进的路桥收费方式。通过安装在车辆挡风玻璃上的车载电子标签与在收费站 ETC 车道上的微波天线之间的微波专用短程通讯，利用计算机联网技术与银行进行后台结算处理，从而达到车辆通过路桥收费站不需停车而能交纳路桥费的目的</p><p><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/002.jpeg" alt=""></p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要有抬起杆子的开关。<br>３．需要有需要有抬起杆子的指令。</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、马达、CPU、触碰开关、附件</p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>1.了解道闸结构.<br>2.了解不停车电子收费系统.<br>3.自己设计并切完成道闸机器人的制作。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/003.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/004.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/005.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/006.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/007.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/008.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/009.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/010.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/011.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/012.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/013.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/014.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/015.png" alt=""><br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/016.png" alt=""></p><h3 id="接力赛机器人程序设计："><a href="#接力赛机器人程序设计：" class="headerlink" title="接力赛机器人程序设计："></a>接力赛机器人程序设计：</h3><p><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/017.png" alt=""><br>道闸机器人已完成，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/18/瓦力工厂/DPJ-016-道闸机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>线控机器人</title>
    <link href="http://yoursite.com/2018/12/18/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%BA%BF%E6%8E%A7%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/18/瓦力工厂/线控机器人/</id>
    <published>2018-12-18T13:10:43.265Z</published>
    <updated>2018-11-10T10:32:34.000Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>瓦力工程师接到一个新任务，新年快要到了，瓦力工厂要求瓦力工程师为新年增加气氛。为新年联欢会设计线控机器人。<br><img src="/2018/12/18/瓦力工厂/线控机器人/001.jpg" alt=""></p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>皮影戏，旧称“影子戏”或“灯影戏”，是一种用蜡烛或燃烧的酒精等光源照射兽皮或纸板做成的人物剪影以表演故事的民间戏剧。表演时，艺人们在白色幕布后面，一边操纵戏曲人物，一边用当地流行的曲调唱述故事（有时用方言），同时配以打击乐器和弦乐，有浓厚的乡土气息。在河南、山西、陕西、甘肃天水等地农村，这种拙朴的汉族民间艺术形式很受人们的欢迎。<br>“皮影”是对皮影戏和皮影戏人物（包括场面道具景物）制品的通用称谓。皮影戏是让观众通过白色幕布，观看一种平面人偶表演的灯影来达到艺术效果的戏剧形式；而皮影戏中的平面人偶以及场面景物，通常是民间艺人用手工，刀雕彩绘而成的皮制品，故称之为皮影。在过去还没有电影、电视的年代，皮影戏曾是十分受欢迎的民间娱乐活动之一。</p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要有轮子（为什么呢？观察生活）<br>３．需要有前进、停止、的控制方法（不能手动）</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、轮子、CPU、触碰开光、附件</p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>课程目标：<br>1.了解输入和输出的概念<br>2.分清输入设备和输出设备<br>3.自己设计并且完成线控机器人<br>的制作</p><p><img src="/2018/12/18/瓦力工厂/线控机器人/002.jpg" alt=""></p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/18/瓦力工厂/线控机器人/003.png" alt=""><br><img src="/2018/12/18/瓦力工厂/线控机器人/004.png" alt=""><br><img src="/2018/12/18/瓦力工厂/线控机器人/005.png" alt=""><br><img src="/2018/12/18/瓦力工厂/线控机器人/006.png" alt=""><br><img src="/2018/12/18/瓦力工厂/线控机器人/007.png" alt=""><br><img src="/2018/12/18/瓦力工厂/线控机器人/008.png" alt=""><br><img src="/2018/12/18/瓦力工厂/线控机器人/009.png" alt=""><br><img src="/2018/12/18/瓦力工厂/线控机器人/010.png" alt=""><br><img src="/2018/12/18/瓦力工厂/线控机器人/011.png" alt=""></p><h3 id="接力赛机器人程序设计："><a href="#接力赛机器人程序设计：" class="headerlink" title="接力赛机器人程序设计："></a>接力赛机器人程序设计：</h3><p><img src="/2018/12/18/瓦力工厂/线控机器人/012.png" alt=""><br>线控机器人已完成，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/18/瓦力工厂/线控机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
