<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>瓦力工厂-编程训练营</title>
  
  <subtitle>Scratch编程 Ardunio机器人搭建 Python自动化</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-27T10:01:03.708Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王俊杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DPJ-018-保险杠机器人</title>
    <link href="http://yoursite.com/2018/12/27/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/DPJ-018-%E4%BF%9D%E9%99%A9%E6%9D%A0%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/</id>
    <published>2018-12-27T10:01:03.708Z</published>
    <updated>2018-12-27T10:01:03.708Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>瓦力探险队在中国西部发现了一个很大的地下洞穴,但由于不清楚洞穴中是否有毒气,因此需要一个探测机器人进入洞穴进行探测,只能靠机器人自己在洞穴中躲避障碍物。现在，瓦力探险队把这个难题抛给瓦力工程师，作为瓦力工程师的我们，我们有责任和义务帮助瓦力探险队尽快设计出这种探测机器人。</p><p><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/001.png" alt=""></p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>开关的词语解释为开启和关闭。它还是指一个可以使电路开路、使电流中断或使其流到其他电路的电子元件。最常见的开关是让人操作的机电设备，其中有一个或数个电子接点。接点的“闭合”（closed）表示电子接点导通，允许电流流过；开关的“开路”（open）表示电子接点不导通形成开路，不允许电流流过。<br>机械轻触开关：仍然是传统的按钮开关，只是改进后行程短，所需按下的距离小而已。<br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/002.png" alt=""></p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要触碰开关感受到信号。<br>３．需要通过触碰开关信号，控制车轮运动。</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、马达、CPU、LED灯、触碰开关、附件</p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>1.学习触碰开关工作原理.<br>2.学习保险杠机器人的工作原理。<br>3.熟练应用 while、break和触碰开关模块编程。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/003.png" alt=""><br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/004.png" alt=""><br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/005.png" alt=""><br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/006.png" alt=""><br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/007.png" alt=""><br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/008.png" alt=""><br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/009.png" alt=""><br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/010.png" alt=""></p><h3 id="保险杠机器人程序设计："><a href="#保险杠机器人程序设计：" class="headerlink" title="保险杠机器人程序设计："></a>保险杠机器人程序设计：</h3><p><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/011.png" alt=""><br>保险杠机器人已完成，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/27/瓦力工厂/DPJ-018-保险杠机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="单片机第一年" scheme="http://yoursite.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA%E7%AC%AC%E4%B8%80%E5%B9%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>装甲车机器人</title>
    <link href="http://yoursite.com/2018/12/27/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E8%A3%85%E7%94%B2%E8%BD%A6%E6%9C%BA%E5%99%A8%E4%BA%BA/"/>
    <id>http://yoursite.com/2018/12/27/瓦力工厂/装甲车机器人/</id>
    <published>2018-12-27T10:00:59.617Z</published>
    <updated>2018-12-27T10:00:59.617Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="情景任务"><a href="#情景任务" class="headerlink" title="情景任务:"></a>情景任务:</h3><p>瓦力工程师接到一个新任务，就是为“国防部”设计装甲车。来满足国防和维稳中用装甲车反坦克、扫雷、通讯和反恐的需要。现在要求制作发射导弹的装甲车，导弹发射时的角度可以自由调整。<br><img src="/2018/12/27/瓦力工厂/装甲车机器人/001.jpg" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/002.jpg" alt=""></p><h3 id="任务分解："><a href="#任务分解：" class="headerlink" title="任务分解："></a>任务分解：</h3><p>１．需要外界能量提供动力<br>２．需要有轮子（为什么呢？观察生活）<br>３．需要有前进、加速、减速、停止、转弯、后退的控制方法<br>４．需要有装甲车的形状、特点。<br>5.调整发射角度，利用马达导杆，控制发射角度。</p><h3 id="知识点拓展："><a href="#知识点拓展：" class="headerlink" title="知识点拓展："></a>知识点拓展：</h3><p>装甲车是具有装甲防护的各种履带或轮式军用车辆，是装有装甲的军用或警用车辆的统称。坦克也是装甲车履带式装甲车辆的一种，但是在习惯上通常因作战用途另外独立分类，而装甲车辆多半是指防护力与火力较坦克弱的车种。<br>装甲车的特性为具有高度的越野机动性能，有一定的防护和火力作用，分为履带式和轮式两种，一般装备一至两门中小口径火炮及数挺机枪，一些还装有反坦克导弹，结构以装甲车体、武器系统、动力装置等组成。</p><h3 id="器材分解："><a href="#器材分解：" class="headerlink" title="器材分解："></a>器材分解：</h3><p>电池盒、轮子、CPU、触碰开光、LED灯、蜂鸣器，伺服马达，导杆系统<br><img src="/2018/12/27/瓦力工厂/装甲车机器人/003.jpg" alt=""></p><h3 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h3><p>1.三个马达的控制方法<br>2.了解装甲车的基础知识。<br>3.了解导杆系统在控制系统角度方面的应用。</p><h3 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h3><p><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_07.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_08.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_09.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_10.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_11.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_12.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_13.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_14.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_15.png" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_16.jpg" alt=""><br><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_17.jpg" alt=""></p><h3 id="装甲车机器人程序设计："><a href="#装甲车机器人程序设计：" class="headerlink" title="装甲车机器人程序设计："></a>装甲车机器人程序设计：</h3><p><img src="/2018/12/27/瓦力工厂/装甲车机器人/装甲车机器人_18.jpg" alt=""><br>装甲车机器人，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/27/瓦力工厂/装甲车机器人/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="单片机第一年" scheme="http://yoursite.com/categories/%E5%8D%95%E7%89%87%E6%9C%BA%E7%AC%AC%E4%B8%80%E5%B9%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程008-蟒蛇绘制</title>
    <link href="http://yoursite.com/2018/12/26/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B008/"/>
    <id>http://yoursite.com/2018/12/26/瓦力工厂/Python零基础快速入门趣味教程008/</id>
    <published>2018-12-26T10:33:05.416Z</published>
    <updated>2018-12-26T10:33:05.416Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://imgchr.com/i/FgNfEQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/FgNfEQ.png" alt="FgNfEQ.png"></a></p><h3 id="Python-语法元素理解"><a href="#Python-语法元素理解" class="headerlink" title="Python 语法元素理解"></a>Python 语法元素理解</h3><ul><li>Python 蟒蛇绘制共17行代码，但很多行类似</li><li>清楚理解这17行代码能够掌握Python基本绘图方法。</li><li>参考框架结构，逐行分析，逐词理解。</li><li>Python 蟒蛇的颜色：黑色、绿色、七彩色…</li><li>Python 蟒蛇的长度：1节、3节、10节…</li><li>Python 蟒蛇的方向：向左走、斜着走…<br>计算问题的扩展。</li><li>Python蟒蛇绘制问题是各类图像绘制问题的代表。</li><li>圆形绘制、五角星绘制、国旗绘制、 机器猫绘制。</li><li>掌握绘制一条线的方法，就可以绘制整个世界</li></ul><p>下面我们系统的对turtle进行学习一下</p><ul><li>turtle基本介绍</li><li>turtle绘图窗体布局</li><li>turtle空间坐标体</li><li>turtle角度坐标体系</li><li>turtle RGB 色彩体系</li></ul><h3 id="turtle库概述"><a href="#turtle库概述" class="headerlink" title="turtle库概述"></a>turtle库概述</h3><p>turtle(海龟)库是turtle绘图体系的Python实现</p><ul><li>turtle绘图体系：1969年诞生，主要用于程序设计入门</li><li>Python语言的标准库之一</li><li>入门级的图形绘制函数库<h4 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h4>Python计算生态 = 标准库 + 第三方库</li><li>标准库：随解释器直接安装到操作系统中的功能模块</li><li>第三方库：需要经过安装才能使用的功能模块</li><li>库Library、包Package、模块Module，统称模块</li></ul><h3 id="turtle的原（wan）理（fa）"><a href="#turtle的原（wan）理（fa）" class="headerlink" title="turtle的原（wan）理（fa）"></a>turtle的原（wan）理（fa）</h3><p>turtle(海龟)是一种真实的存在</p><ul><li>有一只海龟，其实在窗体正中心，在画布上游走</li><li>走过的轨迹形成了绘制的图形</li><li>海龟由程序控制，可以变换颜色、改变宽度等<h3 id="turtle的绘图窗体"><a href="#turtle的绘图窗体" class="headerlink" title="turtle的绘图窗体"></a>turtle的绘图窗体</h3><img src="https://s1.ax1x.com/2018/12/26/F2kusf.png" alt="F2kusf.png"></li></ul><p><img src="https://s1.ax1x.com/2018/12/26/F2k8ij.png" alt="F2k8ij.png"></p><p><img src="https://s1.ax1x.com/2018/12/26/F2kJWn.png" alt="F2kJWn.png"></p><p><img src="https://s1.ax1x.com/2018/12/26/F2k0wF.png" alt="F2k0wF.png"></p><h3 id="turtle空间坐标体系"><a href="#turtle空间坐标体系" class="headerlink" title="turtle空间坐标体系"></a>turtle空间坐标体系</h3><p><img src="https://s1.ax1x.com/2018/12/26/F2kcS1.png" alt="F2kcS1.png"></p><p><img src="https://s1.ax1x.com/2018/12/26/F2kgQx.png" alt="F2kgQx.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">turtle.goto( 100, 100)</span><br><span class="line">turtle.goto( 100,-100)</span><br><span class="line">turtle.goto(-100,-100)</span><br><span class="line">turtle.goto(-100, 100)</span><br><span class="line">turtle.goto(0,0)</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2018/12/26/F2kHSI.png" alt="F2kHSI.png"></p><p><img src="https://s1.ax1x.com/2018/12/26/F2kblt.png" alt="F2kblt.png"></p><h3 id="turtle角度坐标体系"><a href="#turtle角度坐标体系" class="headerlink" title="turtle角度坐标体系"></a>turtle角度坐标体系</h3><p><img src="https://s1.ax1x.com/2018/12/26/F2kXm8.png" alt="F2kXm8.png"></p><p><img src="https://s1.ax1x.com/2018/12/26/F2kj0S.png" alt="F2kj0S.png"></p><p><img src="https://s1.ax1x.com/2018/12/26/F2ASYj.png" alt="F2ASYj.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line">turtle.left(45)</span><br><span class="line">turtle.fd(150)</span><br><span class="line">turtle.right(135)</span><br><span class="line">turtle.fd(300)</span><br><span class="line">turtle.left(135)</span><br><span class="line">turtle.fd(150)</span><br></pre></td></tr></table></figure><p><img src="https://wjunjie83.github.io//18-12-26/24084404.jpg" alt=""></p><p><a href="https://imgchr.com/i/Fcubs1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fcubs1.jpg" alt="Fcubs1.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 入门" scheme="http://yoursite.com/categories/Python-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Anaconda安装TensorFlow</title>
    <link href="http://yoursite.com/2018/12/26/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82-%E4%BD%BF%E7%94%A8Anaconda%E5%AE%89%E8%A3%85TensorFlow/"/>
    <id>http://yoursite.com/2018/12/26/瓦力工厂-使用Anaconda安装TensorFlow/</id>
    <published>2018-12-26T08:50:53.028Z</published>
    <updated>2018-12-26T08:50:53.028Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Take the following steps to install TensorFlow in an Anaconda environment:<br>Follow the instructions on the Anaconda download site to download and install Anaconda.（成功安装了Anaconda之后，在命令行窗口顺序输入一下代码，记得以管理员身份运行）<br>Create a conda environment named tensorflow by invoking the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensorflow pip python=3.6</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/FgX7z4" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/26/FgX7z4.md.png" alt="FgX7z4.md.png"></a></p><p>Activate the conda environment by useing the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate tensorflow</span><br></pre></td></tr></table></figure><p> Issue the appropriate command to install TensorFlow inside your conda environment. To install the CPU-only version of TensorFlow, enter the following command:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --ignore-installed --upgrade tensorflow</span><br></pre></td></tr></table></figure><p> To install the GPU version of TensorFlow, enter the following command (on a single line):</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --ignore-installed --upgrade tensorflow-gpu</span><br></pre></td></tr></table></figure><p> 验证是否安装成功：<br>在命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python</span><br></pre></td></tr></table></figure><p>启动Python<br>接着输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import tensorflow as tf</span><br><span class="line">&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TensorFlow!&apos;)</span><br><span class="line">&gt;&gt;&gt; sess = tf.Session()</span><br><span class="line">&gt;&gt;&gt; print(sess.run(hello))</span><br></pre></td></tr></table></figure><p>如果输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello, TensorFlow!</span><br></pre></td></tr></table></figure><p>那么安装成功！</p><p><a href="https://imgchr.com/i/Fcubs1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fcubs1.jpg" alt="Fcubs1.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 进阶" scheme="http://yoursite.com/categories/Python-%E8%BF%9B%E9%98%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu将应用程序添加桌面到启动器</title>
    <link href="http://yoursite.com/2018/12/26/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Ubuntu%E5%B0%86%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%B7%BB%E5%8A%A0%E5%88%B0%E5%90%AF%E5%8A%A8%E5%99%A8/"/>
    <id>http://yoursite.com/2018/12/26/瓦力工厂/Ubuntu将应用程序添加到启动器/</id>
    <published>2018-12-26T08:43:33.799Z</published>
    <updated>2018-12-26T08:43:33.799Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>有些软件提供的启动方式为 .sh 文件，每次启动都需要在终端运行命令。不是很方便，通过查找资料了解到可以创建一个启动器来解决问题。<br>在linux中，一切皆文件。启动器就是一个后缀为 .desktop 文件。<br>我创建的“ 微信” 的启动器，文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=wechat</span><br><span class="line">GenericName=微信</span><br><span class="line">Comment=Ubuntu 微信</span><br><span class="line">Exec=/home/wjunjie/wechat/electronic-wechat %f</span><br><span class="line">Icon=/home/wjunjie/wechat/assets/icon.png</span><br><span class="line">Terminal=false</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Programme;</span><br><span class="line">GenericName[zh_CN]=wechat</span><br><span class="line">Name[zh_CN]=微信</span><br></pre></td></tr></table></figure><h3 id="语法解释："><a href="#语法解释：" class="headerlink" title="语法解释："></a>语法解释：</h3><table><thead><tr><th>关键词</th><th>意义</th></tr></thead><tbody><tr><td>[Desktop Entry]</td><td>文件头</td></tr><tr><td>Encoding</td><td>编码</td></tr><tr><td>Name</td><td>应用名称</td></tr><tr><td>Name[xx]</td><td>不同语言的应用名称</td></tr><tr><td>GenericName</td><td>描述</td></tr><tr><td>Comment</td><td>注释</td></tr><tr><td>Exec</td><td>执行的命令</td></tr><tr><td>Icon</td><td>图标路径</td></tr><tr><td>Terminal</td><td>是否使用终端</td></tr><tr><td>Categories</td><td>应用的类型（内容相关）</td></tr></tbody></table><hr><h3 id="使用流程："><a href="#使用流程：" class="headerlink" title="使用流程："></a>使用流程：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建文件，以.desktop为后缀。</span><br><span class="line">编写内容，修改权限</span><br><span class="line">双击启动程序，添加信任</span><br><span class="line">移动到/usr/share/applications/目录下，这样就可以在左上角应用程序中显示</span><br></pre></td></tr></table></figure><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><p>其中 Exec 常用的参数有：%f %F %u %U<br>%f：单个文件名，即使选择了多个文件。如果已选择的文件不在本地文件系统中（比如说在HTTP或者FTP上），这个文件将被作为一个临时文件复制到本地，％f将指向本地临时文件；<br>%F：文件列表。用于程序可以同时打开多个本地文件。每个文件以分割段的方式传递给执行程序。<br>%u：单个URL。本地文件以文件URL或文件路径的方式传递。<br>%U：URL列表。每个URL以分割段的方式传递给执行程序。本地文件以文件URL或文件路径的方式传递。</p><p><a href="https://imgchr.com/i/Fcubs1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fcubs1.jpg" alt="Fcubs1.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Ubuntu" scheme="http://yoursite.com/categories/Ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>Anaconda更改Python版本</title>
    <link href="http://yoursite.com/2018/12/25/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Anaconda%E6%9B%B4%E6%94%B9Python%E7%89%88%E6%9C%AC/"/>
    <id>http://yoursite.com/2018/12/25/瓦力工厂/Anaconda更改Python版本/</id>
    <published>2018-12-25T03:37:07.134Z</published>
    <updated>2018-12-25T03:37:07.134Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>写在前面：今天安装  kivy  不支持Python3.7版本，所以想在电脑（Ubuntu）中保留3.5版本。</p><ol><li>改变anaconda默认python版本：</li></ol><p>首先创建一个名为python36的环境，指定的Python版本是3.5<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name python36 python=3.5</span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/12/25/Fc81m9.png" alt="Fc81m9.png"></p><p>安装好后，使用activate激活某个环境<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">To activate this environment, use</span><br><span class="line">#</span><br><span class="line">#     $ conda activate python36</span><br><span class="line">#</span><br><span class="line"># To deactivate an active environment, use</span><br><span class="line">#</span><br><span class="line">#     $ conda deactivate</span><br></pre></td></tr></table></figure></p><p>输入这个命令之后会发现，terminal命令行前面多了python36的字样，实际上，此时系统做的事情就是把默认3.7环境从PATH中去除，再把3.5对应的命令加入PATH<br>安装 kivy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install kivy -c conda-forge</span><br></pre></td></tr></table></figure></p><p><img src="https://s1.ax1x.com/2018/12/25/Fc8QOJ.png" alt="Fc8QOJ.png"><br>通过命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br></pre></td></tr></table></figure></p><p>可以看到，系统已经切换到了3.5的环境。<br><img src="https://s1.ax1x.com/2018/12/25/Fc8My4.png" alt="Fc8My4.png"></p><p>如果想返回默认的python 3.7环境，运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda deactivate</span><br></pre></td></tr></table></figure></p><p> 即可。最后，如果想要删除一个已有的环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name python36 --all</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/Fcubs1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fcubs1.jpg" alt="Fcubs1.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 进阶" scheme="http://yoursite.com/categories/Python-%E8%BF%9B%E9%98%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 下提高conda install的速度</title>
    <link href="http://yoursite.com/2018/12/25/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E6%8F%90%E9%AB%98conda%20install%E7%9A%84%E9%80%9F%E5%BA%A6/"/>
    <id>http://yoursite.com/2018/12/25/瓦力工厂/提高conda install的速度/</id>
    <published>2018-12-25T00:51:27.727Z</published>
    <updated>2018-12-25T00:51:27.727Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="添加清华源"><a href="#添加清华源" class="headerlink" title="添加清华源"></a>添加清华源</h3><p>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</a><br>conda config –add channels <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</a></p><h3 id="（想要删除清华源把add改成remove就行。）"><a href="#（想要删除清华源把add改成remove就行。）" class="headerlink" title="（想要删除清华源把add改成remove就行。）"></a>（想要删除清华源把add改成remove就行。）</h3><h3 id="显示URL"><a href="#显示URL" class="headerlink" title="显示URL"></a>显示URL</h3><p>conda config –set show_channel_urls yes</p><h3 id="除了清华源，也可以使用别的答案里的科大源，华东-华中地区可能会更快一些。"><a href="#除了清华源，也可以使用别的答案里的科大源，华东-华中地区可能会更快一些。" class="headerlink" title="除了清华源，也可以使用别的答案里的科大源，华东/华中地区可能会更快一些。"></a>除了清华源，也可以使用别的答案里的科大源，华东/华中地区可能会更快一些。</h3><p>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/main/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/anaconda/pkgs/main/</a><br>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/pkgs/free/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/anaconda/pkgs/free/</a><br>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/anaconda/cloud/conda-forge/</a><br>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/anaconda/cloud/msys2/</a><br>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/anaconda/cloud/bioconda/</a><br>conda config –add channels <a href="https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/" target="_blank" rel="noopener">https://mirrors.ustc.edu.cn/anaconda/cloud/menpo/</a></p><h3 id="Conda包管理"><a href="#Conda包管理" class="headerlink" title="Conda包管理"></a>Conda包管理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#安装包</span><br><span class="line">conda install xxxx</span><br><span class="line"></span><br><span class="line"># 查看当前环境下已安装的包</span><br><span class="line">conda list</span><br><span class="line"></span><br><span class="line"># 查看某个指定环境的已安装包</span><br><span class="line">conda list -n python34</span><br><span class="line"></span><br><span class="line"># 查找package信息</span><br><span class="line">conda search numpy</span><br><span class="line"></span><br><span class="line"># 安装package</span><br><span class="line">conda install -n python34 numpy # 如果不用-n指定环境名称，则被安装在当前活跃环境 也可以通过-c指定通过某个channel安装</span><br></pre></td></tr></table></figure><h3 id="Conda更新"><a href="#Conda更新" class="headerlink" title="Conda更新"></a>Conda更新</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 更新package</span><br><span class="line">conda update -n python34 numpy</span><br><span class="line"></span><br><span class="line"># 删除package</span><br><span class="line">conda remove -n python34 numpy</span><br><span class="line"></span><br><span class="line"># 更新conda，保持conda最新</span><br><span class="line">conda update conda</span><br><span class="line"></span><br><span class="line"># 更新anaconda</span><br><span class="line">conda update anaconda</span><br><span class="line"></span><br><span class="line"># 更新python</span><br><span class="line">conda update python</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/Fcubs1" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/25/Fcubs1.jpg" alt="Fcubs1.jpg"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 进阶" scheme="http://yoursite.com/categories/Python-%E8%BF%9B%E9%98%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>趣味编程第6课-蜘蛛织网</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%AC%AC6%E8%AF%BE-%E8%9C%98%E8%9B%9B%E7%BB%87%E7%BD%91/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/第6课-蜘蛛织网/</id>
    <published>2018-12-24T15:46:44.560Z</published>
    <updated>2018-12-24T15:46:44.560Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过第五课的学习，大家通过一款微信上流行的小程序对 <em>侦测</em> <em>数据</em> <em>运算</em> <em>声音</em> 等积木模块，有了初步的了解，小朋友们是不是更加喜欢编程了呢？<br>下面是蟑螂画彩圆的效果图。<br><img src="/2018/12/24/瓦力工厂/第6课-蜘蛛织网/001.png" alt=""><br>下面这幅图，蜘蛛织网，图形很复杂，但是只是非常简单的积木模块。<br><img src="/2018/12/24/瓦力工厂/第6课-蜘蛛织网/002.png" alt=""><br>直接上积木模块图，用Scratch画笔功能，可以画各种复杂的图形哟。<br><img src="/2018/12/24/瓦力工厂/第6课-蜘蛛织网/003.png" alt=""><br>小朋友，你会做吧，记得加老师微信并与老师互动讨论哟，你还想加入什么你的功能呢？和老师一起进步吧！<br><img src="/2018/12/24/瓦力工厂/第6课-蜘蛛织网/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>趣味编程第5课-成语猜猜看</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%AC%AC5%E8%AF%BE-%E6%88%90%E8%AF%AD%E7%8C%9C%E7%8C%9C%E7%9C%8B/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/第5课-成语猜猜看/</id>
    <published>2018-12-24T15:46:42.420Z</published>
    <updated>2018-12-24T15:46:42.420Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>通过第四课的学习，相信小朋友们对 <em>运动</em>、<em>外观</em> 、<em>事件</em> 、<em>侦测</em> 等积木模块有了更深一步的了解。下面通过一款微信上流行的小程序继续向大家介绍 <em>侦测</em> <em>数据</em> <em>运算</em> <em>声音</em> 等积木模块。<br><img src="/2018/12/24/瓦力工厂/第5课-成语猜猜看/001.png" alt=""><br>成语是我国汉字语言词汇中一部分定型的词组和短语。成语有固定的结构形式和固定的说法。表示一定的意义在语句中是作为一个整体来应用的。成语有很大一部分是从古代。形成沿用下来的再用词语方面往往不同与现代汉语。它代表了一个故事和典故。成语又是一种现成的话，跟习用语言语向近也略有区别。<br><img src="/2018/12/24/瓦力工厂/第5课-成语猜猜看/002.png" alt=""><br>主要程序代码如图所示，巧妙地利用角色的造型进行程序图片之间的切换，用链表把成语的图片与意义相关联。答对的话有音乐提示与金币奖励。切换到下一个成语，并且所过的关卡加一。用变量 <em>关名</em> 存储并显示所过的关数，用变量 <em>金钱</em> 来存储并显示所获得的金币数。<br><img src="/2018/12/24/瓦力工厂/第5课-成语猜猜看/003.png" alt=""><br>小朋友，你会做吧，记得加老师微信并与老师互动讨论哟，你还想加入什么你的功能呢？和老师一起进步吧！<br><img src="/2018/12/24/瓦力工厂/第5课-成语猜猜看/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>趣味编程第4课-蹦床运动</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%AC%AC4%E8%AF%BE-%E8%B9%A6%E5%BA%8A%E8%BF%90%E5%8A%A8/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/第4课-蹦床运动/</id>
    <published>2018-12-24T15:46:40.004Z</published>
    <updated>2018-12-24T15:46:40.004Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们学习了第三课小猫猜生肖，对对控制、侦测、运算、事件模块有了初步的了解，今天通过蹦床运动介绍 <em>运动</em> 模块的 <em>滑行</em> 、<em>面向</em> 、<em>左右转</em> 和 <em>外观</em> 模块 的 <em>下一个造型</em>、<em>鱼眼特效</em> 等等…<br><img src="/2018/12/24/瓦力工厂/第4课-蹦床运动/001.png" alt=""><br>今天的程序非常简单，当绿旗被点击时，重复执行<br><img src="/2018/12/24/瓦力工厂/第4课-蹦床运动/002.png" alt=""><br>并通过 <em>空格键</em> 和 <em>左移键</em> 和 <em>右移键</em> 进行程序的交互，变换出不同的蹦极效果。<br><img src="/2018/12/24/瓦力工厂/第4课-蹦床运动/003.png" alt=""><br>蹦床的代码为<br><img src="/2018/12/24/瓦力工厂/第4课-蹦床运动/003.png" alt=""><br>蹦床用到了一个鱼眼特效，变幻出来了动态的效果！<br>想要知道蹦床运动的全部脚本或者有不明白的地方，可以联系老师哟！<br><img src="/2018/12/24/瓦力工厂/第4课-蹦床运动/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>趣味编程第3课-小猫猜生肖</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%AC%AC3%E8%AF%BE%E5%B0%8F%E7%8C%AB%E7%8C%9C%E7%94%9F%E8%82%96/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/第3课小猫猜生肖/</id>
    <published>2018-12-24T15:46:36.944Z</published>
    <updated>2018-12-24T15:46:36.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们学习了第二课小猫跳舞后，对角色的添加与删除，背景的添加与删除。有了初步的了解，下面我们演示小猫猜生肖案例，对控制、侦测、运算、事件模块进行介绍！<br><img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/001.png" alt=""><br>这就是小猫猜生肖的基本界面设计，先添加一个背景，然后依次添加角色小猫、老鼠、小狗、猴子…<br>首先,为生肖大师小猫设计脚本：<br><img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/002.png" alt=""><br>1.用<em>事件</em>中积木<img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/003.png" alt="">开始整个程序。<br>2.用<em>控制</em>中积木<img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/004.png" alt="">开始一个循环。<br>3.用<em>侦测</em>中积木<img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/005.png" alt="">开始一个对话框。并把对话提示语改为“请问你的出生年份是多少？”<br>下面详细的介绍一下小猫是如何知道小朋友的生肖的：<br>大家都知道2018年是狗年，2018除以12的余数是2，那么可以推算出来，能被12整除的年份是猴年，余一的是鸡年、余二的是狗年、依次类推。为什么呢？三年级的小朋友都背过 子鼠、丑牛、寅虎、卯兔的生肖顺口溜吧。就根据咱们已经学到的知识。<br><img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/006.png" alt=""><br>上图就是咱们经常用到的<em>控制</em>积木中的积木块，是咱们设计的程序的大脑。<br>看这条语句<img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/007.png" alt="">判断你的输入符不符合实际情况。小朋友可能注意到了，<em>否则</em> 后面有两条语句，棕色的广播语句和紫色的说语句。广播语句是用于程序内部通信的，下面给大家展示一下小猴子角色的脚本。<br><img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/008.png" alt=""><br>是不是和广播的消息遥相呼应。好啦，小猫猜生肖用到的全部知识就介绍完了，想要知道小猫猜生肖的全部脚本或者有不明白的地方，可以联系老师哟！<br><img src="/2018/12/24/瓦力工厂/第3课小猫猜生肖/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>趣味编程第7课-因数与完美数</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%AC%AC7%E8%AF%BE-%E5%9B%A0%E6%95%B0%E4%B8%8E%E5%AE%8C%E7%BE%8E%E6%95%B0/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/第7课-因数与完美数/</id>
    <published>2018-12-24T15:46:10.924Z</published>
    <updated>2018-12-24T15:46:10.924Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>趣味编程第3课-新年到!下雪了</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%AC%AC3%E8%AF%BE-%E6%96%B0%E5%B9%B4%E5%88%B0!%E4%B8%8B%E9%9B%AA%E4%BA%86/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/第3课-新年到!下雪了/</id>
    <published>2018-12-24T15:45:06.949Z</published>
    <updated>2018-12-24T15:45:06.949Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、任务描述"><a href="#一、任务描述" class="headerlink" title="一、任务描述"></a>一、任务描述</h3><p>冬天来了,只见雪花纷纷扬扬地从空中飘下来。雪花落在小树上，小树好像穿上雪白的新衣。雪花落在屋顶上，屋顶好像戴上了雪白的帽子。雪花落在大地上，大地好像盖上了雪白的羊毛毯。要求用动画实现下雪的场景。<br><img src="/2018/12/24/瓦力工厂/第3课-新年到!下雪了/001.png" alt=""></p><h3 id="二、任务目的"><a href="#二、任务目的" class="headerlink" title="二、任务目的"></a>二、任务目的</h3><p>　 1、让大家能够结合我们身边的事物来进行创作，巩固学习编程知识。</p><p>　　2、scratch中克隆体个数是有限的，不能无限制的克隆</p><p>　　3、学习私有变量的创建以及结合克隆体的使用。</p><p>　　4、面对某些不好实现的效果我们需要通过转换思维的办法来解决问题。<br><img src="/2018/12/24/瓦力工厂/第3课-新年到!下雪了/002.png" alt=""></p><h3 id="三、任务分析"><a href="#三、任务分析" class="headerlink" title="三、任务分析"></a>三、任务分析</h3><p>　　1、初级挑战：只需要会使用克隆与随机数即可。在scratch中“克隆”与“当作为克隆体启动时”经常是配合使用，我们通过重复执行，来不断的克隆雪花。在每个克隆体启动时我们设置一下克隆体的大小和位置，然后再通过重复执行，改变克隆体的y坐标就实现了雪花下落效果。<br>2、中级挑战：要求雪花能够落在屋顶、车、路面。这里只要在雪花下落的过程中增加一个侦测的判断条件，只要克隆体碰到车或房子或者路面（路面用颜色来判断），就停止克隆体移动。</p><p>在scratch中克隆体的个数是有限的，你慢慢会发现，雪花会变得越来越少，为了不让雪停下来，我们使用“图章”把克隆的雪花留在舞台上，然后删除克隆体，这样就不会因为克隆体达到上限而停止了。<br><img src="/2018/12/24/瓦力工厂/第3课-新年到!下雪了/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>趣味编程第2课-小猫跳舞</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%AC%AC2%E8%AF%BE%E5%B0%8F%E7%8C%AB%E8%B7%B3%E8%88%9E/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/第2课小猫跳舞/</id>
    <published>2018-12-24T15:44:56.909Z</published>
    <updated>2018-12-24T15:44:56.909Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>当我们学习了第一课，小猫学步后，对Scratch有了初步的了解，本节课通过小猫跳舞程序的编制，给大家讲解Scratch中，角色的添加与删除，背景的添加与删除。不同角色拥有不同的脚本、背景、声音。<br>下面介紹一下Scratch的各个功能区块。<br><img src="/2018/12/24/瓦力工厂/第2课小猫跳舞/001.png" alt=""><br>下面添加小猫跳舞的舞台，给小猫一个充分展示才艺的空间<br><img src="/2018/12/24/瓦力工厂/第2课小猫跳舞/002.png" alt=""><br>小猫有舞台了，下面给小猫添加才艺，把命令积木中的才艺赋给小猫，跳舞、唱歌、弹奏乐器，甚至变脸等等才艺！<br><img src="/2018/12/24/瓦力工厂/第2课小猫跳舞/003.png" alt=""><br>给小猫添加一个领跳，在美女小姐姐的指挥下，让小猫尽情的跳舞吧！<br>当然，也要给美女小姐姐赋予各种各样的才艺。<br><img src="/2018/12/24/瓦力工厂/第2课小猫跳舞/004.png" alt=""><br>小猫跳舞就完成了，有什么疑问，加老师微信进行咨询吧！<br><img src="/2018/12/24/瓦力工厂/第2课小猫跳舞/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>趣味编程第1课-小猫学步</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/%E7%AC%AC1%E8%AF%BE%E5%B0%8F%E7%8C%AB%E5%AD%A6%E6%AD%A5/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/第1课小猫学步/</id>
    <published>2018-12-24T15:44:50.649Z</published>
    <updated>2018-12-24T15:44:50.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr><p>当我们已经安装好了软件。此时是全英文的，我们可以点击这个小宇宙切换成简体中文。所以一定要小朋友要好好学英语，这样我们就可以不用切换啦！<br><img src="/2018/12/24/瓦力工厂/第1课小猫学步/001.png" alt=""><br>现在我们来介绍下Scratch软件每个区块的作用和名字，区块名字记不住没关系的，只要知道每个区块是做什么的就可以啦！<br><img src="/2018/12/24/瓦力工厂/第1课小猫学步/002.png" alt=""><br>菜单-是我们保存文件和打开文件的地方；</p><p>控制按钮-小绿旗是开始，红色圆圈是停止；</p><p>工具箱-可以放大和缩小我们的角色；</p><p>舞台区-就是我们动画和游戏展示的地方；</p><p>新建角色按钮-我们可以建立我们自己喜欢的角色；</p><p>角色列表区-我们可以看到我们有哪些角色；</p><p>程序区块-是我们最重要的地方了，我们需要后面慢慢学习；</p><p>脚本区-是我们的做的程序。</p><p>通过这些枯燥的解释以后，我们就要进入后面的有趣环节了。</p><p>一只不会走路的小猫，要小朋友动脑筋来让它学会走路。</p><p>我们一起来看看最终我们要做成的样子，一只小猫咪在我们的编程下学会了走路。</p><p>是不是太棒啦！！！<br><img src="/2018/12/24/瓦力工厂/第1课小猫学步/003.png" alt=""><br>首先我们添加动作，开始我们编程的第一步，『移动10步』。<br>可是，要不断的点击移动1步，移动1步，小猫咪才会行走，感觉是被老师拖着走的，不是自己在走的，而且老师点击的也有点点累了。<br>老师想让小猫咪自己走起了，不用老师每次去点击一次它才走一步，那么我们就要用一个很关键的程序部分了，那就是重复（循环）。就像我们学习一样要不断的重复才能记住。<img src="/2018/12/24/瓦力工厂/第1课小猫学步/004.png" alt=""><br>小猫能一次走很远了，但是好像小猫的动作很不自然，下面我们就让小猫走的自然一点<br><img src="/2018/12/24/瓦力工厂/第1课小猫学步/005.png" alt=""><br>好的这样我们的第一课『小猫学步』就完成了。现在小朋友可以在回到最开始看看我们的做的程序是不是和老师最开始的视频一样的效果。<br>如果不是看看是不是哪里有什么小问题，还是你又改进什么和新发现。<br>可以给老师留言哟！我们一起学习和进步。<br><img src="/2018/12/24/瓦力工厂/第1课小猫学步/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>儿童编程Scratch 赢在起跑线</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Scratch%20%E7%AE%80%E4%BB%8B/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/Scratch 简介/</id>
    <published>2018-12-24T15:44:19.350Z</published>
    <updated>2018-12-24T15:44:19.350Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/12/24/瓦力工厂/Scratch 简介/001.png" alt="植物大战僵尸"><br>Scratch是一种全新的程序设计语言，你可以用它很容易地创造交互式故事情节、动画、游戏，然后还可以把你的作品分享给所有人。开发者表示，这种电脑编程语言的目的，是帮助年轻人发展学习技能，学习创造性思维，以及学习集体合作。MIT（麻省理工学院）媒体实验室的博士生凯伦.布雷南，是Scratch项目的负责人，他说，“我们的目的不是要创办电脑程序编写大军，而是帮助电脑使用者表达自己。”</p><p><em>与其让孩子玩游戏；</em><br><em>不如让孩子做编程。</em></p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="/2018/12/24/瓦力工厂/Scratch 简介/002.png" alt="植物大战僵尸"></h2><p>Scratch不是游戏，是一款可以制作游戏、动画的编程工具。一旦掌握了这个工具，孩子们就能自由自在地挥洒它们无限的创意，享受创造的乐趣。Scratch由麻省理工学院媒体实验室开发出来至今，全美有超过100万的孩子在学习Scratch。而在台湾，中小学生的信息化课就是以Scratch为主来上的，也有许多Scratch教学的网站。台湾教育部门每年都会举行程序设计比赛。台湾中小学的教育，通过Scratch，扩展了语文，数学，外语，音乐，体育，科学的教学深度。</p><p>科技使人类的生活发生巨大的变化。就当下的教育而言，孩子科技能力的重要性绝不亚于其他才艺和知识。</p><p>根据孩子上课的情况和效果，我们总结了Scratch三大好处。</p><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><img src="/2018/12/24/瓦力工厂/Scratch 简介/003.png" alt="植物大战僵尸"></h2><p>1、学习Scratch可以培养逻辑思维能力。<br>在大年龄段孩子学习Scratch编程时，会涉及许多数学知识，孩子需要结合学校内学到的数学知识，来解决编程问题。因此，在不断探索的过程中，孩子们的数学知识也会越累越丰富，创作能力也越来越强。</p><p>2、学习Scratch可以提高学习的主动性。<br>在Scratch课堂上，我们鼓励孩子自己创作作品。在创作的过程中不仅习得了Science（科学），Technology（技术），Engineering（工程），Arts（艺术），Maths（数学）等多个领域的知识，而且也获得了成就感和满足感。定期校区举办Scratch分享会，让孩子们彼此体验他们自己编程的游戏，互相提出改进方法方式，这个过程大大激励了孩子的成就感和学习欲望。</p><p>3、学习Scratch可以激发创造力。<br>Scratch软件的优势是易学且功能强大，有助于孩子们发挥自己的想象力，而在动手创作过程中，他们的学习积极性、想象力和创造力会得到极大的锻炼。孩子们可以用Scratch中已有的素材，发挥自己的想象力制作游戏、动画，还可以自己设计素材。孩子只要敢想，在我们的指导下，就能完成他们心目中的游戏。</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><img src="/2018/12/24/瓦力工厂/Scratch 简介/004.png" alt="植物大战僵尸"></h2><p>儿童编程和程序员的编程有什么区别？</p><p>归于一句话“孩子编程看兴趣，大人编程看薪水。”</p><p>儿童编程使用简易的编程软件进行编程思想和思维方式的锻炼，核心的理念是在把计算机编程融合孩子兴趣的同时，加强孩子思维能力的锻炼，在中国的大多数的儿童编程学习中，均将学科知识与编程知识相融合的方式进行授课教学。这在中国是有一定原因的：传统的中国式教育是以升学为目的的，只有将学科知识融入到编程学习中，家长才会乐于让孩子去接触。而成人的程序编程主要学的是程序语法的应用和实践，他主要偏向的是计算机编程的项目开发。</p><p>相对于在学校信息课上所学的知识来说，用于初学者教学，Scratch有以下这些优点：</p><p>1、入门简单，无关原有编程基础，适合中小学学生初次学习编程语言时使用；</p><p>2、内容丰富，针对有兴趣、喜爱绘画的学生，提供角色绘制设计功能；</p><p>3、通过使用Scratch，让学生在动画、游戏设计过程中逐渐形成逻辑分析、独立思考创新的思维方式，学会提出问题，解决问题；</p><p>4、相比其他编程软件，Scratch更加直观，学生能比较容易地看到自己的劳动成果。</p><p>学习编程最基本的是编程概念的掌握，Scratch以积木的形式进行编程，8个编程部件涵盖了常见的编程概念。学习编程最重要的是编程思想的培养，在程序学习中培养学生利用编程解决问题的能力。</p><p>学生在学会了编程的基本原理和方法后，会有兴趣也有能力将动画和游戏编写得更逼真，更好玩。在修改动画游戏脚本的过程中，学生不断提出问题，解决问题，根据自己的需求进行分析，设定合适的角色和相应的脚本，最终实现程序。<br><img src="/2018/12/24/瓦力工厂/Scratch 简介/瓦力.jpeg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Scratch 入门" scheme="http://yoursite.com/categories/Scratch-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程007-条件循环</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B007/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程007/</id>
    <published>2018-12-24T15:43:08.395Z</published>
    <updated>2018-12-24T15:43:08.395Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>条件循环能够让程序在条件成立时（即为真时）重复执行循环体中的语句。如果条件一直成立（即永远不会为假），则循环会一直进行下去，不会停止。如果初始时，条件不成立，则循环 1 次也不会执行。Python 中条件循环使用 while 关键字来实现。</p><p>看下面这段示例代码，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.speed(0)</span><br><span class="line">def forward(max_distance):</span><br><span class="line">    distance = 0</span><br><span class="line">    step = 1</span><br><span class="line">    while distance &lt; max_distance:</span><br><span class="line">        turtle.forward(step)</span><br><span class="line">        distance += step</span><br><span class="line">forward(100)</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>函数 forward 实现的功能和原版的 turtle.forward 是一样的，但这里我们是借助条件循环来实现的。</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程007/001.png" alt=""></p><p>第 5 行 turtle.speed(0) 设置海龟爬行的速度。速度的取值为 [0, 10]。当取值在 [1, 10] 之间时，数值越大，绘图的速度就越快。当取值为 0 时，海龟将以最快的速度绘图。这里，我们让海龟以最快的速度爬行。因为，在我们自定义的 forward 函数中（第 8-13 行），我们要让海龟移动很多步，但每次只移动 1 个很小的距离，为了尽快看到最终绘图的效果，我们得让海龟爬得快一些。</p><p>第 8 行 def forward(max_distance): 声明 forward 函数，它有 1 个参数 max_distance。这个函数要实现的功能是，让海龟一直爬行，直到海龟总的爬行距离达到（或超过） max_distance 时才停止爬行。</p><p>第 9 行 distance = 0 变量 distance 用于记录当前海龟已经累计爬行了多远的距离。初始时，海龟还没有开始爬行，因此 distance 的初始值为 0。</p><p>第 10 行 step = 1 设置海龟爬行的步长，即每 1 步要爬多远的距离。</p><p>第 11-13 行是用 while 语句实现的条件循环，其中第 11 行， while distance &lt; max_distance: 指明了循环条件为  distance &lt; max_distance 即，当海龟累计爬行距离 (distance) 小于规定的最大爬行距离 (max_distance) 时，执行循环体中的语句（第 12, 13 行）。</p><p>第 12, 13 行是循环体，其中第 12 行 turtle.forward(step) 让海龟以指定步长 step 前进一小段距离。第 13 行 distance += step 这是一种简写的形式，它等价于 distance = distance + step ，即将海龟刚才（第 12 行）爬行的那一小段距离累加到 distance 变量中。类似 for 循环，while 循环的循环体（第 12, 13 行）也要比 while  语句所在的行（第 11 行），向右缩进一些，通常我们用连续的 4 个空格来表示一级的缩进。</p><p>不过，现在的 forward 跟原版的 turtle.forward 效果是一样的，没啥意思，瓦力博士把代码改进一下，让它变得好玩一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.speed(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def forward(max_distance, max_radius):</span><br><span class="line">    distance = 0</span><br><span class="line">    step = 1</span><br><span class="line">    while distance &lt; max_distance:</span><br><span class="line">        if turtle.distance(0,0) &gt;= max_radius:</span><br><span class="line">            angle = turtle.towards(0,0)</span><br><span class="line">            turtle.setheading(angle)</span><br><span class="line">        turtle.forward(step)</span><br><span class="line">        distance += step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">forward(550, 100)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>再次运行程序，你会看到海龟在一条直线上折返爬行。</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程007/002.png" alt=""></p><p>第 8 行 def forward(max_distance, max_radius): 我们为 forward 函数引入了一个新的参数 max_radius。后面，我们要实现的功能是当海龟离开原点的距离达到（或超过） max_radius 时，就调头往回爬，即往复爬行。</p><p>实现往复爬行对应的代码在第 12-14 行。</p><p>第 12 行 if turtle.distance(0,0) &gt;= max_radius: ，其中 turtle.distance(0,0) 返回的是海龟与原点 (0, 0) 的距离。因此，当海龟与原点的距离达到或超过 max_radius 时，if 条件成立，程序将执行相应的语句（第 13, 14 行）。</p><p>第 13 行 angle = turtle.towards(0,0) ，其中  turtle.towards(0,0) 返回的是海龟朝向原点 (0, 0) 的角度。计算角度时，水平向右为 0 度，逆时针方向为角度增大的方向。</p><p>第 14 行 turtle.setheading(angle) 直接设定海龟的朝向，由于前面（第 13 行），将 angle 的值设置为海龟朝向原点的角度，所以这里经过 setheading 设置之后，海龟将朝向原点的方向。因此，后面再调用 turtle.forward  （第 15 行），海龟就会往原点的方向移动，即往回爬行。</p><p>现在，海龟能够在一条直线上往复爬行，虽然比之前改进了一些，但还是显得比较单调。接下来，瓦力博士再进一步改进代码，让它变得更生动一些。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import turtle</span><br><span class="line">import random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.shape(&quot;turtle&quot;)</span><br><span class="line">turtle.speed(0)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def forward(max_distance, max_radius):</span><br><span class="line">    distance = 0</span><br><span class="line">    step = 1</span><br><span class="line">    while distance &lt; max_distance:</span><br><span class="line">        if turtle.distance(0,0) &gt;= max_radius:</span><br><span class="line">            angle = turtle.towards(0,0) + random.randint(-45, 45)</span><br><span class="line">            turtle.setheading(angle)</span><br><span class="line">        turtle.forward(step)</span><br><span class="line">        distance += step</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">forward(10000, 100)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>运行上面的代码，你会看到海龟随机地往返爬行。刚开始，你看不出什么规律，但等它爬行一段时间之后，你会发现海龟实际上是被限制在一个圆圈当中运动。</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程007/003.png" alt=""></p><p>第 2 行 import random 导入 random 模块，用于生成随机数。</p><p>第 14  行 angle = turtle.towards(0,0) + random.randint(-45, 45) 其中的  random.randint(-45, 45) 用于产生 [-45, 45] 之间的随机整数，将这个随机整数加到朝向原点的角度上，这样海龟就不再精确地朝向原点，而是有一个随机波动的角度。因此，海龟就不再精确地按原路返回，从而摆脱直线的束缚。</p><p>但是，原来的 2 个约束依然存在：</p><p>海龟离开原点的距离不能超过 max_radius（第 13 行），所以它被限制在一个圆圈中运动<br>海龟总的运动距离不能超过 max_distance （第 12 行），所以它最终会停止运动</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 入门" scheme="http://yoursite.com/categories/Python-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程006-条件</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B006/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程006/</id>
    <published>2018-12-24T15:43:03.555Z</published>
    <updated>2018-12-24T15:43:03.555Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前面的教程中，我们已经可以让小海龟绘制出各种图形了。但是，所有绘图的代码都是预先编好的，程序一旦运行起来，运行结果（绘制的图形）就是固定不变的。这一节中，瓦力博士将教大家如何让海龟响应用户的输入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def move():</span><br><span class="line">    direction = turtle.textinput(&apos;Input direction&apos;, &apos;Go left or right?&apos;)</span><br><span class="line">    if direction == &apos;left&apos;:</span><br><span class="line">        turtle.left(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line"></span><br><span class="line">    if direction == &apos;right&apos;:</span><br><span class="line">        turtle.right(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line">move()</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure></p><p>程序运行起来之后，会先弹出一个输入框，询问你海龟的运动方向。你可以输入 left 或者 right。<br><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程006/001.png" alt=""></p><p>当你按下 ok 按钮之后，海龟就会根据你的输入（left 或 right），相应地向左或向右运动。</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程006/002.png" alt=""></p><p>这个例子中，程序的运行结果不完全取决于事先编写的代码，它还和你的输入有关。</p><p>第 5 行 direction = turtle.textinput(‘Input direction’, ‘Go left or right?’) 弹出一个输入框。输入框（窗口）的标题是 Input direction，输入框的提示文字为 Go left or right?。</p><p>当用户完成输入点击 ok 按钮时，变量 direction 将获得用户输入的值。<br>当用户点击 cancel 按钮时，变量 direction 的值为 None （None 为Python 中的关键字，表示什么也没有的意思）。<br>第 7, 8, 9 行称为条件语句。每个 if 语句（第 7 行）表示一个条件，它只有 2 种情况：要么成立（为真，值为 True），要么不成立（为假，值为 False）。</p><p>第 7 行 if direction == ‘left’: 对应的条件是判断变量 direction 与字符串 ‘left’ 是否相等。如果相等则执行第 8, 9 行的代码，否则就不执行第 8, 9 行的代码。</p><p>翻译成大白话就像下面这样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">如果变量 direction 等于 left，则执行下面的语句</span><br><span class="line">    turtle.left(60)</span><br><span class="line">    turtle.forward(100)</span><br></pre></td></tr></table></figure></p><p>  所以，当用户输入 left，并点击 ok 按钮时，direction 接收到用户的输入 left，它的值等于 left，海龟就先向左转 60 度（执行第 8 行代码），再前进 100 个单位（执行第 9 行代码）。</p><p>要注意的是 Python 中比较 2 个东西是否相等，要用 == （即 2 个连续的等号），因为单独的 = （等号）在 Python 中表达的是将某个值赋值给某个变量的意思，因此，比较是否相等就得用另外的符号（即 ==）了。</p><p>另外，还要注意缩进，第 8, 9 行的代码要比 if 语句所在的行（第 7 行），向右缩进一些。这样 Python 才知道，当 if 语句为真时（即条件成立时），需要执行哪些代码。和瓦力博士在前面的教程中谈到的一样，我们一般用连续的 4 个空格符号来表示一级的缩进。</p><p>第 11, 12, 13 行也是条件语句，它们和第 7, 8, 9 行代码类似，只不过条件成立的条件改成了变量 direction 的值等于 right。</p><p>if 语句还有其他一些语法。下面，瓦力博士给大家展示的是 if … else 的语法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def move():</span><br><span class="line">    direction = turtle.textinput(&apos;Input direction&apos;, &apos;Go left or right?&apos;)</span><br><span class="line"></span><br><span class="line">    if direction == &apos;left&apos;:</span><br><span class="line">        turtle.left(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line">    else:</span><br><span class="line">        turtle.right(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line"></span><br><span class="line">move()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p> 将 7-12 行的代码翻译成大白话就像下面这样，<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 如果变量 direction 等于 left，则执行下面的语句</span><br><span class="line">    turtle.left(60)</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">否则，执行下面的语句</span><br><span class="line">    turtle.right(60)</span><br><span class="line">    turtle.forward(100)</span><br></pre></td></tr></table></figure></p><p> 注意体会前后 2 个版本细微的差别。考虑用户输入一个既不是 left 也不是 right 的字符串（或者直接点击 cancel 按钮）。</p><p> 前一个版本中，海龟不会发生运动。因为此时， if direction == ‘left’: 不成立， if direction == ‘right’: 也不成立，所有的绘图代码都没有机会执行。<br> 后一个版本中，海龟会往右下方向运动。因为，后一个版本只检查 if direction == ‘left’: 是否成立。当该条件不成立时，不论变量 direction 的值是多少，它都会执行 else 对应的语句。<br> 要实现和第 1  个版本一样的效果，我们可以用 if … elif 这样的语法。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> import turtle</span><br><span class="line"></span><br><span class="line">def move():</span><br><span class="line">    direction = turtle.textinput(&apos;Input direction&apos;, &apos;Go left or right?&apos;)</span><br><span class="line">    if direction == &apos;left&apos;:</span><br><span class="line">        turtle.left(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line">    elif direction == &apos;right&apos;:</span><br><span class="line">        turtle.right(60)</span><br><span class="line">        turtle.forward(100)</span><br><span class="line">move()</span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p> 这个版本中，程序会依次，</p><p>先检查 if direction == ‘left’: （第 7 行）的条件，如果成立则执行相应的代码（第 8, 9 行），并忽略剩余的其他条件。如果不成立，则顺次检查下一个条件  if direction == ‘right’: （第 10 行）。<br>类似地，如果该条件成立，则执行相应的代码（第 11, 12 行），并忽略剩余的其他条件，否则再顺次检查下一个条件。<br>这样一直重复下去，直至没有可检查的条件为止。<br>虽然，第 3 个版本和第 1 个版本，最终呈现的效果是一模一样的，但它们的内部的执行过程，仍然有细微的差别。</p><p>第 1 个版本中，程序一定会检查条件 if direction == ‘right’: 是否成立，无论前一个条件  if direction == ‘left’: 是否成立。<br>最后一个版本中，程序只有在前一个条件 if direction == ‘left’: 不成立的时候，才会检查条件  if direction == ‘right’: 是否成立。<br>因此，虽然最终的效果是一样的，但从执行效率上来看，最后一个版本要略微高效一些。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 入门" scheme="http://yoursite.com/categories/Python-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程005-参数</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B005/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程005/</id>
    <published>2018-12-24T15:42:59.363Z</published>
    <updated>2018-12-24T15:42:59.363Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>上一个教程中，瓦力博士带大家学习了函数的使用。例如，line_without_moving 函数，可以让海龟先画出一条线段，然后再回来起点。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br></pre></td></tr></table></figure></p><p>  但是，这个函数还是有一些局限性的。譬如，海龟所画线段的长度是固定的，这样就显得不够灵活。那么有什么办法，让函数变得更灵活一些呢？答案就是使用参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def line_without_moving(length):</span><br><span class="line">  turtle.forward(length)</span><br><span class="line">  turtle.backward(length)</span><br></pre></td></tr></table></figure></p><p>对比前后 2 段代码，新版的 line_without_moving 在函数声明的地方（第 1 行），在小括号里面写上了 length；又将函数体中（第 2, 3 行）的数字 100 替换成 length。这里的 length 就称为函数的参数，我们在函数调用时，可以向函数参数传递不同的值，这样函数体中用到 length 参数的地方，也就间接地用到我们提供的值啦。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def line_without_moving(length):</span><br><span class="line">    turtle.forward(length)</span><br><span class="line">    turtle.backward(length)</span><br><span class="line"></span><br><span class="line">line_without_moving(100)</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving(150)</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving(200)</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving(250)</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>运行上面这段画十字型的代码，我们看到构成十字型的 4 条线段长短不一。这是因为我们在调用 line_without_moving 函数时，使用了不同的参数（第 9, 11, 13, 15 行）。<br><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程005/001.png" alt=""></p><p>关于函数参数，瓦力博士要提醒大家的是，函数参数只能在本函数内部（即本函数体中）使用。函数之外，函数参数就无效了。例如，函数 line_without_moving 的参数 length 就只能在 line_without_moving 函数中使用，你不能在其他的地方使用它。</p><p>还记得上个教程中，瓦力博士给大家留的那个画蜂巢的作业吗？聪明的你，是不是已经画出来了呢？</p><p>下面是瓦力博士的代码，代大家参考。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def hexagon():</span><br><span class="line">  for i in range(6):</span><br><span class="line">      turtle.forward(50)</span><br><span class="line">      turtle.left(60)</span><br><span class="line"></span><br><span class="line">def honeycomb():</span><br><span class="line">    for i in range (6):</span><br><span class="line">        hexagon()</span><br><span class="line">        turtle.forward(50)</span><br><span class="line">        turtle.right(60)</span><br><span class="line"></span><br><span class="line">honeycomb()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>现在，蜂巢的大小的固定的。使用这节课的知识，通过函数参数，我们可以很方便地控制蜂巢的大小。</p><p>下面是瓦力博士改进后的代码。通过参数 size，我们可以自由地控制蜂巢的大小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def hexagon(size):</span><br><span class="line">  for i in range(6):</span><br><span class="line">      turtle.forward(size)</span><br><span class="line">      turtle.left(60)</span><br><span class="line"></span><br><span class="line">def honeycomb(size):</span><br><span class="line">    for i in range (6):</span><br><span class="line">        hexagon(size)</span><br><span class="line">        turtle.forward(size)</span><br><span class="line">        turtle.right(60)</span><br><span class="line"></span><br><span class="line">honeycomb(80)</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程005/002.png" alt=""></p><p>参数的传递过程如下：</p><p>第 14 行，我们在调用函数 honeycomb  时，将 80 传递给了 honeycomb 的参数 size<br>函数 honeycomb 接受了 80 这个参数值（第 8 行），因此函数 honeycomb 中，所有使用到参数 size 的地方（第 10, 11 行），都得到了 80 这个值<br>函数 honeycomb 中，又将 80 这个值传递给被调用的函数，第 10 传递给函数 hexagon, 第 11 行传递给函数 turtle.forward<br>函数 hexagon 接受了 80 个参数值（第 3 行），因此函数 hexagon 中，所有使用到参数 size 的地方（第 5 行），都得到了 80 这个值<br>……<br>这里，瓦力博士要提醒大家的是：函数 hexagon 和 honeycomb 中都有参数 size，这 2 个 size 虽然同名，而且在参数传递的过程中，都被赋予相同的值（80），但它们不是同一个参数！hexagon 中的参数 size，其作用域（即有效范围）是第 3-6 行；honeycomb 中的参数 size，其作用域是第 8-12 行。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>尝试编写一个带参数的函数，实现任意正多边形的绘制<br><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程005/003.png" alt=""></p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>设计一个名为 draw_polygon 的函数来绘制任意正多边形<br>draw_polygon 接受 2 个参数 sides 和 length（多个参数之间用英文逗号分隔）<br>sides 用于控制正多边形的边数（内角）<br>length 用于控制正多边的边长（大小）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def draw_polygon(sides, length):</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 入门" scheme="http://yoursite.com/categories/Python-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Python零基础快速入门趣味教程004-函数</title>
    <link href="http://yoursite.com/2018/12/24/%E7%93%A6%E5%8A%9B%E5%B7%A5%E5%8E%82/Python%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E8%B6%A3%E5%91%B3%E6%95%99%E7%A8%8B004/"/>
    <id>http://yoursite.com/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程004/</id>
    <published>2018-12-24T15:42:55.199Z</published>
    <updated>2018-12-24T15:42:55.199Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>什么样的程序员才是优秀的程序员？瓦力博士认为“慵懒”的程序员才是真正优秀的程序员。听起来不合逻辑？真正优秀的程序员知道如何高效地工作，而不是用不止境的加班来完成工作任务。函数便是程序员高效工作的利器之一。</p><p>事实上，在前面的教程中，我们已经在使用函数了。例如，我们在每段代码的最后，都会调用 turtle.exitonclick() 函数。exitonclick 函数的作用就是让海龟画完图像之后保持住，不要退出，直到我们点击窗口的时候 (onclick)，才退出 (exit)。我们不需要知道函数 exitonclick 具体是怎样实现的，我们只需要在合适的地方调用它，使用它提供的功能就可以了。使用函数便是程序员高效工作的秘密（之一）。</p><p>那么，我们要如何定义自己的函数呢？</p><p>Python 中，我们使用 def 关键字来定义函数。请看下面这个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br></pre></td></tr></table></figure></p><p>  跟在关键字 def 之后的是函数名 line_without_moving。后面，我们就可以用 line_without_moving 这个函数名来调用它了。函数名之后，需要有一个冒号，告诉 python 接下来就是函数的具体内容（称为函数体）。</p><p>函数的功能就是通过函数体中的语句来实现的。注意到，函数体中的语句 (第2, 3 行) 和 def 所在的行 (第 1 行) 相比，要往右缩进了一些。Python 正是通过缩进来判断哪些语句是属于函数体中的语句（类似前面教程中谈到的，Python 用缩进来判断哪些语句属于循环体）。通常，我们用 4 个空格符来表示一级的缩进。</p><p>好了，让我们仔细看看 line_without_moving 的函数体（第 2, 3 行），看看这个函数实现的是什么功能？ turtle.forward(100) 前进 100 个单位距离， turtle.backward(100) 后退 100 个单位的距离，这一进一退，小海龟又回到了原来的位置，这不等于啥也没干吗？No No No！海龟虽然又回到的原来的位置，但它在爬行过程中，会在屏幕上留下痕迹，即画出线条。因此，line_without_moving 这个函数的作用就是让海龟沿着当前方向绘制一条长度为 100 个单位的线条，然后还要回到起始的位置，同时保持龟头的方向不变。</p><p>上面的代码，仅仅是定义了函数 line_without_moving。光定义函数是看不到直接的效果的，函数需要被使用（即被调用），函数体中的代码才能被执行，我们才能看到效果。例如，下面的代码，我们在 line_without_moving 函数定义之后，调用了它（第 7, 9, 11, 13 行）。调用方式为函数名之后，跟一个小括号。这样，我们就能看到函数调用之后的效果了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br><span class="line">line_without_moving()</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving()</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving()</span><br><span class="line">turtle.right(90)</span><br><span class="line">line_without_moving()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>运行上面的代码，我们可以看到一个十字型的图案。</p><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程004/001.png" alt=""></p><p>类似循环可以嵌套一样，函数也可以嵌套。上面画十字型的代码，还可以改写成下面的形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br><span class="line"></span><br><span class="line">def draw_cross():</span><br><span class="line">    line_without_moving()</span><br><span class="line">    turtle.right(90)</span><br><span class="line">    line_without_moving()</span><br><span class="line">    turtle.right(90)</span><br><span class="line">    line_without_moving()</span><br><span class="line">    turtle.right(90)</span><br><span class="line">    line_without_moving()</span><br><span class="line">draw_cross()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><p>第 7-14 行，定义了一个新的函数 draw_cross。第 16 行，调用 draw_cross 函数画十字，而 draw_cross 函数内部又调用了 line_without_moving 函数（第  8, 10, 12, 14 行），即函数嵌套函数。</p><p>进一步观察，我们发现 8-14 行的代码有许多是重复的。第 8, 9 行的代码，重复了 4 次。结合前面瓦力博士讲的循环，聪明的你是不是已经想到了如何进一步简化代码了呢？下面是瓦力博士给出的参考代码，是不是和你想的一样呢？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import turtle</span><br><span class="line"></span><br><span class="line">def line_without_moving():</span><br><span class="line">    turtle.forward(100)</span><br><span class="line">    turtle.backward(100)</span><br><span class="line"></span><br><span class="line">def draw_cross():</span><br><span class="line">    for i in range(4):</span><br><span class="line">        line_without_moving()</span><br><span class="line">        turtle.right(90)</span><br><span class="line"></span><br><span class="line">draw_cross()</span><br><span class="line"></span><br><span class="line">turtle.exitonclick()</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程004/002.png" alt=""></p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p><img src="/2018/12/24/瓦力工厂/Python零基础快速入门趣味教程004/003.png" alt=""></p><p>蜂窝是由一系列的正六边形构成的，先编写一个绘制正六边的函数，再通过多次函数调用的方式绘制出多个正六边形<br>设计正六边形函数的时候，要让海龟在画完正六边形之后，再次回到起始的位置，并保持龟头方向不变，这样方便我们拼接多个正六边形构成蜂窝的图案<br>在考虑如何用多个正六边形构成蜂窝时，请忽略绘制正六边形的细节（请忘记龟头转了几度，海龟前进了多少距离等细节 ），只需要知道海龟在绘制单个正六边形时的旋转方向（顺时针还是逆时针），并且海龟在绘制正六边形之后，会回到起始的位置，并保持龟头方向不变<br>在函数调用时忽略函数内部的细节，这事实上就是一种抽象的思维，函数不仅是程序员“偷懒”的工具，更是程序员通过抽象思维，实现复杂逻辑的利器。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Python 入门" scheme="http://yoursite.com/categories/Python-%E5%85%A5%E9%97%A8/"/>
    
    
  </entry>
  
</feed>
